{"version":3,"file":"ol-wfst.js","sources":["../src/modules/errors.ts","../src/modules/i18n/es.ts","../src/modules/i18n/en.ts","../src/modules/i18n/zh.ts","../src/modules/i18n/index.ts","../src/modules/loading.ts","../src/@enums.ts","../src/modules/state.ts","../src/modules/base/BaseLayer.ts","../src/modules/base/WfsSource.ts","../src/WfsLayer.ts","../src/modules/base/WmsSource.ts","../src/WmsLayer.ts","../src/assets/images/upload.svg","../src/assets/images/draw.svg","../src/assets/images/visibilityOn.svg","../src/assets/images/visibilityOff.svg","../src/myPragma.ts","../src/modules/LayersControl.tsx","../src/modules/editLayer.ts","../src/modules/Uploads.ts","../src/modules/helpers.ts","../src/defaults.ts","../src/modules/EditControlChanges.tsx","../src/modules/styleFunction.ts","../src/modules/EditFieldsModal.ts","../src/Geoserver.ts","../src/assets/images/editFields.svg","../src/assets/images/editGeom.svg","../src/modules/EditOverlay.tsx","../src/ol-wfst.ts"],"sourcesContent":["// External\r\nimport Modal from 'modal-vanilla';\r\n\r\nimport { Options } from '../ol-wfst';\r\nimport { ExceptionGeoserver, IGeoserverDescribeFeatureType } from '../@types';\r\nlet options = {};\r\n\r\n// Store layerNames that has errors\r\nconst isError = new Set();\r\n\r\nexport const initModal = (opts: Options['modal']) => {\r\n    options = opts;\r\n};\r\n\r\nexport const parseError = (\r\n    geoserverResponse: IGeoserverDescribeFeatureType\r\n) => {\r\n    if ('exceptions' in geoserverResponse) {\r\n        return (geoserverResponse.exceptions as ExceptionGeoserver[])\r\n            .map((e) => e.text)\r\n            .join(',');\r\n    } else {\r\n        return '';\r\n    }\r\n};\r\n\r\n/**\r\n * Show modal with errors\r\n *\r\n * @param msg\r\n * @private\r\n */\r\nexport const showError = (\r\n    msg: string,\r\n    originalError: Error = null,\r\n    layerName = ''\r\n): void => {\r\n    // Prevent multiples modals error in the same layer\r\n    if (isError.has(layerName)) {\r\n        return;\r\n    }\r\n\r\n    isError.add(layerName);\r\n\r\n    let err_msg = `<b>Error: ${msg}</b>`;\r\n    if (originalError && originalError.message !== msg) {\r\n        err_msg += `. ${originalError.message}`;\r\n    }\r\n\r\n    const al = Modal.alert(err_msg, options);\r\n\r\n    al.show();\r\n\r\n    al.on('hidden', () => {\r\n        isError.delete(layerName);\r\n    });\r\n};\r\n","import { I18n } from '../../ol-wfst';\r\n\r\nexport const es: I18n = {\r\n    labels: {\r\n        select: 'Seleccionar',\r\n        addElement: 'Modo dibujo',\r\n        editElement: 'Editar elemento',\r\n        save: 'Guardar',\r\n        delete: 'Eliminar',\r\n        cancel: 'Cancelar',\r\n        apply: 'Aplicar cambios',\r\n        upload: 'Subir',\r\n        editMode: 'Modo Edición',\r\n        confirmDelete: '¿Estás seguro de borrar el elemento?',\r\n        geomTypeNotSupported: 'Geometría no compatible con la capa',\r\n        editFields: 'Editar campos',\r\n        editGeom: 'Editar geometría',\r\n        selectDrawType: 'Tipo de geometría para dibujar',\r\n        uploadToLayer: 'Subir archivo a la capa seleccionada',\r\n        uploadFeatures: 'Subida de elementos a la capa',\r\n        validFeatures: 'Válidas',\r\n        invalidFeatures: 'Invalidas',\r\n        loading: 'Cargando...',\r\n        toggleVisibility: 'Cambiar visibilidad de la capa',\r\n        close: 'Cerrar'\r\n    },\r\n    errors: {\r\n        capabilities: 'No se pudieron obtener las Capabilidades del GeoServer',\r\n        wfst: 'El GeoServer no tiene soporte a Transacciones',\r\n        layer: 'No se pudieron obtener datos de la capa',\r\n        layerNotFound: 'Capa no encontrada',\r\n        layerNotVisible: 'La capa no está visible',\r\n        noValidGeometry:\r\n            'No se encontraron geometrías válidas para agregar a esta capa',\r\n        geoserver: 'No se pudieron obtener datos desde el GeoServer',\r\n        badFormat: 'Formato no soportado',\r\n        badFile: 'Error al leer elementos del archivo',\r\n        lockFeature: 'No se pudieron bloquear elementos en el GeoServer',\r\n        transaction: 'Error al hacer transacción con el GeoServer',\r\n        getFeatures: 'Error al obtener elemento desde el GeoServer'\r\n    }\r\n};\r\n","import { I18n } from '../../ol-wfst';\r\n\r\nexport const en: I18n = {\r\n    labels: {\r\n        select: 'Select',\r\n        addElement: 'Toggle Draw mode',\r\n        editElement: 'Edit feature',\r\n        save: 'Save',\r\n        delete: 'Delete',\r\n        cancel: 'Cancel',\r\n        apply: 'Apply changes',\r\n        upload: 'Upload',\r\n        editMode: 'Edit Mode',\r\n        confirmDelete: 'Are you sure to delete the feature?',\r\n        geomTypeNotSupported: 'Geometry not supported by layer',\r\n        editFields: 'Edit fields',\r\n        editGeom: 'Edit geometry',\r\n        selectDrawType: 'Geometry type to draw',\r\n        uploadToLayer: 'Upload file to selected layer',\r\n        uploadFeatures: 'Uploaded features to layer',\r\n        validFeatures: 'Valid geometries',\r\n        invalidFeatures: 'Invalid',\r\n        loading: 'Loading...',\r\n        toggleVisibility: 'Toggle layer visibility',\r\n        close: 'Close'\r\n    },\r\n    errors: {\r\n        capabilities: 'GeoServer Capabilities could not be downloaded.',\r\n        wfst: 'The GeoServer does not support Transactions',\r\n        layer: 'Could not get data from layer',\r\n        layerNotFound: 'Layer not found',\r\n        layerNotVisible: 'Layer is not visible',\r\n        noValidGeometry: 'No valid geometries found to add to this layer',\r\n        geoserver: 'Failed to get data from GeoServer',\r\n        badFormat: 'Unsupported format',\r\n        badFile: 'Error reading items from file',\r\n        lockFeature: 'Could not lock items on the GeoServer',\r\n        transaction: 'Error when doing Transaction with GeoServer',\r\n        getFeatures: 'Error getting elements from GeoServer'\r\n    }\r\n};\r\n","import { I18n } from '../../ol-wfst';\r\n\r\nexport const zh: I18n = {\r\n    labels: {\r\n        select: '选择',\r\n        addElement: '切换绘图类型',\r\n        editElement: '编辑元素',\r\n        save: '保存',\r\n        delete: '删除',\r\n        cancel: '取消',\r\n        apply: '确认并应用改变',\r\n        upload: '上传',\r\n        editMode: '编辑模式',\r\n        confirmDelete: '确认删除元素?',\r\n        geomTypeNotSupported: '图层不支持该几何',\r\n        editFields: '编辑区域',\r\n        editGeom: '编辑几何',\r\n        selectDrawType: '几何类型',\r\n        uploadToLayer: '通过文件上传图层',\r\n        uploadFeatures: '上传元素到图层',\r\n        validFeatures: '合法的几何类型',\r\n        invalidFeatures: '不合法',\r\n        loading: '加载中...',\r\n        toggleVisibility: '切换图层透明度',\r\n        close: '关闭'\r\n    },\r\n    errors: {\r\n        capabilities: '无法加载GeoServer服务所支持的能力.',\r\n        wfst: 'GeoServer不支持事务',\r\n        layer: '无法从图层获得数据',\r\n        layerNotFound: 'Layer not found',\r\n        layerNotVisible: 'Layer is not visible',\r\n        noValidGeometry: '不支持的几何类型无法加载到图层',\r\n        geoserver: '无法从GeoServer获取数据',\r\n        badFormat: '不支持的格式',\r\n        badFile: '读取文件数据出错',\r\n        lockFeature: '无法锁定GeoServer上的元素.',\r\n        transaction: 'GeoServer处理事务出错.',\r\n        getFeatures: '从GeoServer获取元素出错.'\r\n    }\r\n};\r\n","import { I18n } from '../../@types';\r\nexport * from './es';\r\nexport * from './en';\r\nexport * from './zh';\r\n\r\nimport { es } from './es';\r\nimport { en } from './en';\r\nimport { zh } from './zh';\r\n\r\nconst langs = {\r\n    es,\r\n    en,\r\n    zh\r\n};\r\n\r\n// Set default Language\r\nexport let I18N: I18n = en;\r\n\r\nexport const setLang = (lang = 'en', customI18n: I18n = null): void => {\r\n    // Check if language exists\r\n    if (lang in langs) {\r\n        I18N = langs[lang];\r\n    }\r\n\r\n    // Check if customs translations are provided\r\n    if (customI18n) {\r\n        I18N = { ...I18N, ...customI18n };\r\n    }\r\n};\r\n\r\n/**\r\n * /**\r\n * For translations thas has a variable \"{}\"\" to be replaced inside\r\n * @param string\r\n * @param args\r\n * @returns\r\n */\r\nexport const I18N_ = (string: string, ...args: any): string => {\r\n    let text = I18N[string];\r\n\r\n    if (!text) {\r\n        console.error('Translation not found', string);\r\n        text = string;\r\n    }\r\n\r\n    if (args.length) {\r\n        args.forEach((arg) => {\r\n            text = text.replace(/{}/, arg);\r\n        });\r\n    }\r\n\r\n    return text;\r\n};\r\n","import { I18N } from './i18n';\r\n\r\nlet loadingDiv: HTMLDivElement;\r\n\r\nexport const initLoading = (): HTMLDivElement => {\r\n    loadingDiv = document.createElement('div');\r\n    loadingDiv.className = 'ol-wfst--tools-control--loading';\r\n    loadingDiv.innerHTML = I18N.labels.loading;\r\n    return loadingDiv;\r\n};\r\n\r\nexport const showLoading = (bool: boolean = true) => {\r\n    if (bool) {\r\n        loadingDiv.classList.add('ol-wfst--tools-control--loading-show');\r\n    } else {\r\n        loadingDiv.classList.remove('ol-wfst--tools-control--loading-show');\r\n    }\r\n};\r\n","export enum GeometryType {\r\n    Point = 'Point',\r\n    LineString = 'LineString',\r\n    LinearRing = 'LinearRing',\r\n    Polygon = 'Polygon',\r\n    MultiPoint = 'MultiPoint',\r\n    MultiLineString = 'MultiLineString',\r\n    MultiPolygon = 'MultiPolygon',\r\n    GeometryCollection = 'GeometryCollection',\r\n    Circle = 'Circle'\r\n}\r\n\r\nexport enum TransactionType {\r\n    Insert = 'insert',\r\n    Delete = 'delete',\r\n    Update = 'update'\r\n}\r\n","import Map from 'ol/Map.js';\r\nimport { FeatureLike } from 'ol/Feature.js';\r\n\r\nimport WfsLayer from '../WfsLayer';\r\nimport WmsLayer from '../WmsLayer';\r\nimport { IWfstLayersList } from '../@types';\r\n\r\nlet map: Map;\r\nlet layerToInsertElements: WfsLayer | WmsLayer = null;\r\nlet mode = null;\r\n\r\nexport enum Modes {\r\n    Edit = 'EDIT',\r\n    Draw = 'DRAW'\r\n}\r\n\r\nexport function activateMode(m: Modes = null) {\r\n    mode = m;\r\n}\r\n\r\nexport function getMode() {\r\n    return mode;\r\n}\r\n\r\nconst editedFeatures: Set<string> = new Set();\r\nconst mapLayers: IWfstLayersList = {};\r\n\r\nexport function setMap(m: Map) {\r\n    map = m;\r\n}\r\n\r\nexport function getMap(): Map {\r\n    return map;\r\n}\r\n\r\nexport function setActiveLayerToInsertEls(layer: WmsLayer | WfsLayer) {\r\n    layerToInsertElements = layer;\r\n}\r\n\r\nexport function getActiveLayerToInsertEls(): WmsLayer | WfsLayer {\r\n    return layerToInsertElements;\r\n}\r\n\r\nexport function setMapLayers(data) {\r\n    Object.assign(mapLayers, data);\r\n}\r\n\r\nexport function getStoredMapLayers(): IWfstLayersList {\r\n    return mapLayers;\r\n}\r\n\r\nexport function getStoredLayer(layerName: string): WfsLayer | WmsLayer {\r\n    return getStoredMapLayers()[layerName];\r\n}\r\n\r\nexport function addFeatureToEditedList(feature: FeatureLike): void {\r\n    editedFeatures.add(String(feature.getId()));\r\n}\r\n\r\nexport function removeFeatureFromEditList(feature: FeatureLike): void {\r\n    editedFeatures.delete(String(feature.getId()));\r\n}\r\n\r\nexport function isFeatureEdited(feature: FeatureLike): boolean {\r\n    return editedFeatures.has(String(feature.getId()));\r\n}\r\n","import Feature from 'ol/Feature.js';\r\nimport Geometry from 'ol/geom/Geometry.js';\r\nimport { TransactionResponse } from 'ol/format/WFS.js';\r\nimport Layer from 'ol/layer/Base.js';\r\n\r\nimport Geoserver from '../../Geoserver';\r\nimport { IGeoserverDescribeFeatureType } from '../../@types';\r\nimport { GeometryType, TransactionType } from '../../@enums';\r\nimport { I18N } from '../i18n';\r\nimport { getMap } from '../state';\r\nimport { showError } from '../errors';\r\nimport { parseError } from '../errors';\r\n\r\n/**\r\n * Base class from which all layer types are derived.\r\n */\r\nexport default class BaseLayer extends Layer {\r\n    /**\r\n     * @private\r\n     */\r\n    _init(): void {\r\n        const geoserver = this.getGeoserver() as Geoserver;\r\n\r\n        if (geoserver.isLoaded()) {\r\n            this.getAndUpdateDescribeFeatureType();\r\n        } else {\r\n            geoserver.on('change:capabilities', async () => {\r\n                this.getAndUpdateDescribeFeatureType();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Request and store data layers obtained by DescribeFeatureType\r\n     *\r\n     * @public\r\n     */\r\n    async getAndUpdateDescribeFeatureType(): Promise<void> {\r\n        const layerName = this.get(BaseLayerProperty.NAME);\r\n        const layerLabel = this.get(BaseLayerProperty.LABEL);\r\n\r\n        try {\r\n            const geoserver = this.getGeoserver() as Geoserver;\r\n\r\n            const params = new URLSearchParams({\r\n                service: 'wfs',\r\n                version: geoserver.getAdvanced().describeFeatureTypeVersion,\r\n                request: 'DescribeFeatureType',\r\n                typeName: layerName,\r\n                outputFormat: 'application/json',\r\n                exceptions: 'application/json'\r\n            });\r\n\r\n            const url_fetch = geoserver.getUrl() + '?' + params.toString();\r\n\r\n            const response = await fetch(url_fetch, {\r\n                headers: geoserver.getHeaders(),\r\n                credentials: geoserver.getCredentials()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('');\r\n            }\r\n\r\n            const data: IGeoserverDescribeFeatureType = await response.json();\r\n\r\n            if (!data) {\r\n                throw new Error('');\r\n            }\r\n\r\n            if (data.exceptions) {\r\n                throw new Error(parseError(data));\r\n            }\r\n\r\n            const targetNamespace = data.targetNamespace;\r\n            const properties = data.featureTypes[0].properties;\r\n\r\n            // Find the geometry field\r\n            const geom = properties.find((el) => el.type.indexOf('gml:') >= 0);\r\n\r\n            data._parsed = {\r\n                namespace: targetNamespace,\r\n                properties: properties,\r\n                geomType: geom.localType as GeometryType,\r\n                geomField: geom.name\r\n            };\r\n\r\n            this.set(BaseLayerProperty.DESCRIBEFEATURETYPE, data);\r\n        } catch (err) {\r\n            console.error(err);\r\n            showError(`${I18N.errors.layer} \"${layerLabel}\"`, err, layerName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @returns\r\n     */\r\n    isVisibleByZoom(): boolean {\r\n        return getMap().getView().getZoom() > this.getMinZoom();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mode\r\n     * @param features\r\n     * @public\r\n     */\r\n    async transactFeatures(\r\n        mode: TransactionType,\r\n        features: Array<Feature<Geometry>> | Feature<Geometry>\r\n    ): Promise<TransactionResponse | false> {\r\n        const geoserver = this.getGeoserver() as Geoserver;\r\n        return geoserver.transact(\r\n            mode,\r\n            features,\r\n            this.get(BaseLayerProperty.NAME)\r\n        );\r\n    }\r\n\r\n    async insertFeatures(\r\n        features: Array<Feature<Geometry>> | Feature<Geometry>\r\n    ): Promise<TransactionResponse | false> {\r\n        return this.transactFeatures(TransactionType.Insert, features);\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     * @param featureId\r\n     * @returns\r\n     */\r\n    async maybeLockFeature(featureId: string | number): Promise<string> {\r\n        const geoserver = this.getGeoserver() as Geoserver;\r\n\r\n        if (geoserver.getUseLockFeature() && geoserver.hasLockFeature()) {\r\n            return await geoserver.lockFeature(\r\n                featureId,\r\n                this.get(BaseLayerProperty.NAME)\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    getGeoserver(): Geoserver {\r\n        return this.get(BaseLayerProperty.GEOSERVER);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    getDescribeFeatureType(): IGeoserverDescribeFeatureType {\r\n        return this.get(BaseLayerProperty.DESCRIBEFEATURETYPE);\r\n    }\r\n}\r\n\r\nexport enum BaseLayerProperty {\r\n    NAME = 'name',\r\n    LABEL = 'label',\r\n    DESCRIBEFEATURETYPE = 'describeFeatureType',\r\n    ISVISIBLE = 'isVisible',\r\n    GEOSERVER = 'geoserver'\r\n}\r\n\r\nexport type BaseLayerEventTypes =\r\n    | 'layerRendered'\r\n    | `change:${BaseLayerProperty.DESCRIBEFEATURETYPE}`\r\n    | `change:${BaseLayerProperty.ISVISIBLE}`;\r\n","import Feature from 'ol/Feature.js';\r\nimport GeoJSON from 'ol/format/GeoJSON.js';\r\nimport Geometry from 'ol/geom/Geometry.js';\r\nimport VectorSource, { Options as VSOptions } from 'ol/source/Vector.js';\r\nimport { transformExtent } from 'ol/proj.js';\r\nimport { bbox } from 'ol/loadingstrategy.js';\r\n\r\nimport { WfsGeoserverVendor } from '../../@types';\r\nimport { parseError, showError } from '../errors';\r\nimport { I18N } from '../i18n';\r\nimport { GeoServerAdvanced } from '../../Geoserver';\r\n\r\n/**\r\n * Layer source to retrieve WFS features from geoservers\r\n * https://docs.geoserver.org/stable/en/user/services/wfs/reference.html\r\n *\r\n * @extends {ol/source/Vector~VectorSource}\r\n * @param options\r\n */\r\nexport default class WfsSource extends VectorSource {\r\n    public urlParams = new URLSearchParams({\r\n        SERVICE: 'wfs',\r\n        REQUEST: 'GetFeature',\r\n        OUTPUTFORMAT: 'application/json',\r\n        EXCEPTIONS: 'application/json'\r\n    });\r\n\r\n    constructor(options: WfsSourceOptions) {\r\n        super({\r\n            ...options,\r\n            format: new GeoJSON(),\r\n            loader: async (\r\n                extent,\r\n                resolution,\r\n                projection,\r\n                success,\r\n                failure\r\n            ) => {\r\n                try {\r\n                    // If bbox, add extent to the request\r\n                    if (options.strategy == bbox) {\r\n                        const extentGeoServer = transformExtent(\r\n                            extent,\r\n                            projection.getCode(),\r\n                            options.geoServerAdvanced.projection\r\n                        );\r\n                        // https://docs.geoserver.org/stable/en/user/services/wfs/reference.html\r\n                        // request features using a bounding box with CRS maybe different from featureTypes native CRS\r\n                        this.urlParams.set(\r\n                            'bbox',\r\n                            extentGeoServer.toString() +\r\n                                `,${options.geoServerAdvanced.projection}`\r\n                        );\r\n                    }\r\n\r\n                    const url_fetch =\r\n                        options.geoserverUrl + '?' + this.urlParams.toString();\r\n\r\n                    const response = await fetch(url_fetch, {\r\n                        headers: options.headers,\r\n                        credentials: options.credentials\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        throw new Error('');\r\n                    }\r\n\r\n                    const data = await response.json();\r\n\r\n                    if (data.exceptions) {\r\n                        throw new Error(parseError(data));\r\n                    }\r\n\r\n                    const features = this.getFormat().readFeatures(data, {\r\n                        featureProjection: projection.getCode(),\r\n                        dataProjection: options.geoServerAdvanced.projection\r\n                    });\r\n\r\n                    features.forEach((feature: Feature<Geometry>) => {\r\n                        feature.set(\r\n                            '_layerName_',\r\n                            options.name,\r\n                            /* silent = */ true\r\n                        );\r\n                    });\r\n\r\n                    this.addFeatures(features as Feature<Geometry>[]);\r\n\r\n                    success(features as Feature<Geometry>[]);\r\n                } catch (err) {\r\n                    this.removeLoadedExtent(extent);\r\n\r\n                    showError(I18N.errors.geoserver, err, options.name);\r\n\r\n                    failure();\r\n                }\r\n            }\r\n        });\r\n\r\n        this.urlParams.set(\r\n            'version',\r\n            options.geoServerAdvanced.getFeatureVersion\r\n        );\r\n\r\n        this.urlParams.set('typename', options.name);\r\n\r\n        this.urlParams.set(\r\n            'srsName',\r\n            options.geoServerAdvanced.projection.toString()\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * **_[interface]_** - Parameters to create a WfsSource\r\n *\r\n * @public\r\n */\r\nexport interface WfsSourceOptions extends VSOptions {\r\n    /**\r\n     * Layer name in the GeoServer\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Url for OWS services. This endpoint will recive the WFS, WFST and WMS requests\r\n     */\r\n    geoserverUrl: string;\r\n\r\n    /**\r\n     * Advanced options for geoserver requests\r\n     */\r\n    geoServerAdvanced?: GeoServerAdvanced;\r\n\r\n    /**\r\n     *\r\n     */\r\n    geoserverVendor?: WfsGeoserverVendor;\r\n\r\n    /**\r\n     * Url headers for GeoServer requests. You can use it to add Authorization credentials\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Request/headers\r\n     */\r\n    headers?: HeadersInit;\r\n\r\n    /**\r\n     * Credentials for fetch requests\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials\r\n     */\r\n    credentials?: RequestCredentials;\r\n}\r\n","import Feature from 'ol/Feature.js';\r\nimport Geometry from 'ol/geom/Geometry.js';\r\nimport VectorLayer from 'ol/layer/Vector.js';\r\nimport BaseEvent from 'ol/events/Event.js';\r\nimport { CombinedOnSignature, EventTypes, OnSignature } from 'ol/Observable.js';\r\nimport { EventsKey } from 'ol/events.js';\r\nimport { LayerRenderEventTypes } from 'ol/render/EventType.js';\r\nimport { BaseLayerObjectEventTypes } from 'ol/layer/Base.js';\r\nimport { ObjectEvent } from 'ol/Object.js';\r\nimport RenderEvent from 'ol/render/Event.js';\r\n\r\nimport { Mixin } from 'ts-mixer';\r\n\r\nimport BaseLayer, { BaseLayerEventTypes } from './modules/base/BaseLayer';\r\nimport WfsSource from './modules/base/WfsSource';\r\nimport { LayerOptions } from './ol-wfst';\r\nimport { showLoading } from './modules/loading';\r\nimport { TransactionType } from './@enums';\r\nimport { WfsGeoserverVendor } from './@types';\r\n\r\n/**\r\n * Layer to retrieve WFS features from geoservers\r\n * https://docs.geoserver.org/stable/en/user/services/wfs/reference.html\r\n *\r\n * @fires layerRendered\r\n * @extends {ol/layer/Vector~VectorLayer}\r\n * @param options\r\n */\r\nexport default class WfsLayer extends Mixin(BaseLayer, VectorLayer<WfsSource>) {\r\n    private _loadingCount = 0;\r\n    private _loadedCount = 0;\r\n\r\n    public beforeTransactFeature: (\r\n        feature: Feature<Geometry>,\r\n        transaction: TransactionType\r\n    ) => Feature<Geometry>;\r\n\r\n    declare on: OnSignature<EventTypes, BaseEvent, EventsKey> &\r\n        OnSignature<\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'change:source'\r\n            | 'sourceready',\r\n            ObjectEvent,\r\n            EventsKey\r\n        > &\r\n        OnSignature<LayerRenderEventTypes, RenderEvent, EventsKey> &\r\n        CombinedOnSignature<\r\n            | EventTypes\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'change:source'\r\n            | 'sourceready'\r\n            | LayerRenderEventTypes,\r\n            EventsKey\r\n        >;\r\n\r\n    declare once: OnSignature<EventTypes, BaseEvent, EventsKey> &\r\n        OnSignature<\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'change:source'\r\n            | 'sourceready',\r\n            ObjectEvent,\r\n            EventsKey\r\n        > &\r\n        OnSignature<LayerRenderEventTypes, RenderEvent, EventsKey> &\r\n        CombinedOnSignature<\r\n            | EventTypes\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'change:source'\r\n            | 'sourceready'\r\n            | LayerRenderEventTypes,\r\n            EventsKey\r\n        >;\r\n\r\n    declare un: OnSignature<EventTypes, BaseEvent, void> &\r\n        OnSignature<\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'change:source'\r\n            | 'sourceready',\r\n            ObjectEvent,\r\n            void\r\n        > &\r\n        OnSignature<LayerRenderEventTypes, RenderEvent, void> &\r\n        CombinedOnSignature<\r\n            | EventTypes\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'change:source'\r\n            | 'sourceready'\r\n            | LayerRenderEventTypes,\r\n            void\r\n        >;\r\n\r\n    constructor(options: LayerOptions) {\r\n        super({\r\n            name: options.name,\r\n            label: options.label || options.name,\r\n            minZoom: options.minZoom,\r\n            ...options\r\n        });\r\n\r\n        if (options.beforeTransactFeature) {\r\n            this.beforeTransactFeature = options.beforeTransactFeature;\r\n        }\r\n\r\n        const geoserver = options.geoserver;\r\n\r\n        const source = new WfsSource({\r\n            name: options.name,\r\n            geoserverUrl: geoserver.getUrl(),\r\n            geoServerAdvanced: geoserver.getAdvanced(),\r\n            ...(options.strategy && { strategy: options.strategy }),\r\n            geoserverVendor: options.geoserverVendor\r\n        });\r\n\r\n        this._loadingCount = 0;\r\n        this._loadedCount = 0;\r\n\r\n        source.on('featuresloadstart', () => {\r\n            this._loadingCount++;\r\n            if (this._loadingCount === 1 && this.isVisibleByZoom()) {\r\n                showLoading();\r\n            }\r\n        });\r\n\r\n        source.on(['featuresloadend', 'featuresloaderror'], () => {\r\n            this._loadedCount++;\r\n            if (this._loadingCount === this._loadedCount) {\r\n                this._loadingCount = 0;\r\n                this._loadedCount = 0;\r\n                setTimeout(() => {\r\n                    this.dispatchEvent('layerRendered');\r\n                }, 300);\r\n            }\r\n        });\r\n\r\n        this.setSource(source);\r\n\r\n        const geoserverOptions = options.geoserverVendor as WfsGeoserverVendor;\r\n\r\n        Object.keys(geoserverOptions).forEach((param) => {\r\n            source.urlParams.set(param, geoserverOptions[param]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     */\r\n    refresh() {\r\n        const source = this.getSource();\r\n        // Refrescamos el wms\r\n        source.refresh();\r\n    }\r\n\r\n    /**\r\n     * Use this to update Geoserver Wms Vendors (https://docs.geoserver.org/latest/en/user/services/wms/vendor.html)\r\n     * and other arguements (https://docs.geoserver.org/stable/en/user/services/wms/reference.html#getmap)\r\n     * in all the getMap requests.\r\n     *\r\n     * Example: you can use this to change the style of the WMS, add a custom sld, set a cql_filter, etc.\r\n     *\r\n     * @public\r\n     * @param paramName\r\n     * @param value Use `undefined` or `null` to remove the param\r\n     * @param refresh\r\n     */\r\n    setCustomParam(\r\n        paramName: string,\r\n        value: string = null,\r\n        refresh = true\r\n    ): URLSearchParams {\r\n        const source = this.getSource();\r\n\r\n        if (value === undefined || value === null) {\r\n            source.urlParams.delete(paramName);\r\n        } else {\r\n            source.urlParams.set(paramName, value);\r\n        }\r\n\r\n        if (refresh) {\r\n            this.refresh();\r\n        }\r\n\r\n        return source.urlParams;\r\n    }\r\n}\r\n","import TileWMS, { Options as TSOptions } from 'ol/source/TileWMS.js';\r\nimport TileState from 'ol/TileState.js';\r\nimport ImageTile from 'ol/ImageTile.js';\r\n\r\nimport { WmsGeoserverVendor } from '../../@types';\r\nimport { parseError, showError } from '../errors';\r\nimport { I18N } from '../i18n';\r\nimport { GeoServerAdvanced } from '../../Geoserver';\r\n\r\n/**\r\n * Layer source to retrieve WMS information from geoservers\r\n * https://docs.geoserver.org/stable/en/user/services/wms/reference.html\r\n *\r\n * @extends {ol/source/TieWMS~TileWMS}\r\n * @param options\r\n */\r\nexport default class WmsSource extends TileWMS {\r\n    constructor(options: WmsSourceOptions) {\r\n        super({\r\n            url: options.geoserverUrl,\r\n            serverType: 'geoserver',\r\n            params: {\r\n                SERVICE: 'wms',\r\n                TILED: true,\r\n                LAYERS: options.name,\r\n                EXCEPTIONS: 'application/json',\r\n                ...(options.geoserverVendor && options.geoserverVendor)\r\n            },\r\n            tileLoadFunction: async (tile, src) => {\r\n                const blobToJson = (blob: Blob): any => {\r\n                    return new Promise((resolve) => {\r\n                        const reader = new FileReader();\r\n                        reader.onloadend = () =>\r\n                            resolve(JSON.parse(reader.result as string));\r\n                        reader.readAsText(blob);\r\n                    });\r\n                };\r\n\r\n                try {\r\n                    const response = await fetch(src, {\r\n                        headers: options.headers,\r\n                        credentials: options.credentials\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        throw new Error('');\r\n                    }\r\n\r\n                    let data = await response.blob();\r\n\r\n                    // Check if the response has an error\r\n                    if (data.type == 'application/json') {\r\n                        const parsedError = await blobToJson(data);\r\n                        throw new Error(parseError(parsedError));\r\n                    }\r\n\r\n                    ((tile as ImageTile).getImage() as HTMLImageElement).src =\r\n                        URL.createObjectURL(data);\r\n\r\n                    tile.setState(TileState.LOADED);\r\n                } catch (err) {\r\n                    showError(I18N.errors.geoserver, err, options.name);\r\n                    tile.setState(TileState.ERROR);\r\n                }\r\n            },\r\n            ...options\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * **_[interface]_** - Parameters to create a WmsSource\r\n *\r\n * @public\r\n */\r\nexport interface WmsSourceOptions extends Omit<TSOptions, 'params'> {\r\n    /**\r\n     * Layer name in the GeoServer\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Url for OWS services. This endpoint will recive the WFS, WFST and WMS requests\r\n     */\r\n    geoserverUrl: string;\r\n\r\n    /**\r\n     * Advanced options for geoserver requests\r\n     */\r\n    geoServerAdvanced?: GeoServerAdvanced;\r\n\r\n    /**\r\n     *\r\n     */\r\n    geoserverVendor?: WmsGeoserverVendor;\r\n\r\n    /**\r\n     * Url headers for GeoServer requests. You can use it to add Authorization credentials\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Request/headers\r\n     */\r\n    headers?: HeadersInit;\r\n\r\n    /**\r\n     * Credentials for fetch requests\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials\r\n     */\r\n    credentials?: RequestCredentials;\r\n}\r\n","import MapBrowserEvent from 'ol/MapBrowserEvent.js';\r\nimport TileLayer from 'ol/layer/Tile.js';\r\nimport Geometry from 'ol/geom/Geometry.js';\r\nimport Feature from 'ol/Feature.js';\r\nimport GeoJSON from 'ol/format/GeoJSON.js';\r\nimport BaseEvent from 'ol/events/Event.js';\r\nimport { CombinedOnSignature, EventTypes, OnSignature } from 'ol/Observable.js';\r\nimport { EventsKey } from 'ol/events.js';\r\nimport { LayerRenderEventTypes } from 'ol/render/EventType.js';\r\nimport { BaseLayerObjectEventTypes } from 'ol/layer/Base.js';\r\nimport { ObjectEvent } from 'ol/Object.js';\r\nimport RenderEvent from 'ol/render/Event.js';\r\n\r\nimport WmsSource from './modules/base/WmsSource';\r\nimport BaseLayer, { BaseLayerEventTypes } from './modules/base/BaseLayer';\r\nimport { LayerOptions } from './ol-wfst';\r\nimport { showLoading } from './modules/loading';\r\nimport { TransactionType } from './@enums';\r\nimport { showError } from './modules/errors';\r\nimport { I18N } from './modules/i18n';\r\nimport { getMap } from './modules/state';\r\nimport { Mixin } from 'ts-mixer';\r\nimport { WmsGeoserverVendor } from './@types';\r\n\r\n/**\r\n * Layer to retrieve WMS information from geoservers\r\n * https://docs.geoserver.org/stable/en/user/services/wms/reference.html\r\n *\r\n * @fires layerRendered\r\n * @extends {ol/layer/Tile~TileLayer}\r\n * @param options\r\n */\r\nexport default class WmsLayer extends Mixin(BaseLayer, TileLayer<WmsSource>) {\r\n    private _loadingCount = 0;\r\n    private _loadedCount = 0;\r\n\r\n    public beforeTransactFeature: (\r\n        feature: Feature<Geometry>,\r\n        transaction: TransactionType\r\n    ) => Feature<Geometry>;\r\n\r\n    // Formats\r\n    private _formatGeoJSON: GeoJSON;\r\n\r\n    declare on: OnSignature<EventTypes, BaseEvent, EventsKey> &\r\n        OnSignature<\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'sourceready'\r\n            | 'change:source'\r\n            | 'change:preload'\r\n            | 'change:useInterimTilesOnError',\r\n            ObjectEvent,\r\n            EventsKey\r\n        > &\r\n        OnSignature<LayerRenderEventTypes, RenderEvent, EventsKey> &\r\n        CombinedOnSignature<\r\n            | EventTypes\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'sourceready'\r\n            | 'change:source'\r\n            | 'change:preload'\r\n            | 'change:useInterimTilesOnError'\r\n            | LayerRenderEventTypes,\r\n            EventsKey\r\n        >;\r\n    declare once: OnSignature<EventTypes, BaseEvent, EventsKey> &\r\n        OnSignature<\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'sourceready'\r\n            | 'change:source'\r\n            | 'change:preload'\r\n            | 'change:useInterimTilesOnError',\r\n            ObjectEvent,\r\n            EventsKey\r\n        > &\r\n        OnSignature<LayerRenderEventTypes, RenderEvent, EventsKey> &\r\n        CombinedOnSignature<\r\n            | EventTypes\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'sourceready'\r\n            | 'change:source'\r\n            | 'change:preload'\r\n            | 'change:useInterimTilesOnError'\r\n            | LayerRenderEventTypes,\r\n            EventsKey\r\n        >;\r\n\r\n    declare un: OnSignature<EventTypes, BaseEvent, void> &\r\n        OnSignature<\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'sourceready'\r\n            | 'change:source'\r\n            | 'change:preload'\r\n            | 'change:useInterimTilesOnError',\r\n            ObjectEvent,\r\n            void\r\n        > &\r\n        OnSignature<LayerRenderEventTypes, RenderEvent, void> &\r\n        CombinedOnSignature<\r\n            | EventTypes\r\n            | BaseLayerEventTypes\r\n            | BaseLayerObjectEventTypes\r\n            | 'sourceready'\r\n            | 'change:source'\r\n            | 'change:preload'\r\n            | 'change:useInterimTilesOnError'\r\n            | LayerRenderEventTypes,\r\n            void\r\n        >;\r\n\r\n    constructor(options: LayerOptions) {\r\n        super({\r\n            name: options.name,\r\n            label: options.label || options.name,\r\n            minZoom: options.minZoom,\r\n            ...options\r\n        });\r\n\r\n        if (options.beforeTransactFeature) {\r\n            this.beforeTransactFeature = options.beforeTransactFeature;\r\n        }\r\n\r\n        this._formatGeoJSON = new GeoJSON();\r\n\r\n        const geoserver = options.geoserver;\r\n\r\n        const source = new WmsSource({\r\n            name: options.name,\r\n            geoserverUrl: geoserver.getUrl(),\r\n            geoServerAdvanced: geoserver.getAdvanced(),\r\n            geoserverVendor: options.geoserverVendor as WmsGeoserverVendor\r\n        });\r\n\r\n        this._loadingCount = 0;\r\n        this._loadedCount = 0;\r\n\r\n        source.on('tileloadstart', () => {\r\n            this._loadingCount++;\r\n            if (this._loadingCount === 1 && this.isVisibleByZoom()) {\r\n                showLoading();\r\n            }\r\n        });\r\n\r\n        source.on(['tileloadend', 'tileloaderror'], () => {\r\n            this._loadedCount++;\r\n            if (this._loadingCount === this._loadedCount) {\r\n                this._loadingCount = 0;\r\n                this._loadedCount = 0;\r\n                setTimeout(() => {\r\n                    this.dispatchEvent('layerRendered');\r\n                }, 300);\r\n            }\r\n        });\r\n\r\n        this.setSource(source);\r\n    }\r\n\r\n    /**\r\n     * Get the features on the click area\r\n     * @param evt\r\n     * @returns\r\n     * @private\r\n     */\r\n    async _getFeaturesByClickEvent(\r\n        evt: MapBrowserEvent<UIEvent>\r\n    ): Promise<Feature<Geometry>[]> {\r\n        const coordinate = evt.coordinate;\r\n\r\n        const view = getMap().getView();\r\n\r\n        // Si la vista es lejana, disminumos el buffer\r\n        // Si es cercana, lo aumentamos, por ejemplo, para podeer clickear los vectores\r\n        // y mejorar la sensibilidad en IOS\r\n        const buffer = view.getZoom() > 10 ? 10 : 5;\r\n\r\n        const source = this.getSource();\r\n\r\n        // Fallback to support a bad name\r\n        // https://openlayers.org/en/v5.3.0/apidoc/module-ol_source_ImageWMS-ImageWMS.html#getGetFeatureInfoUrl\r\n        const fallbackOl5 =\r\n            'getFeatureInfoUrl' in source\r\n                ? 'getFeatureInfoUrl'\r\n                : 'getGetFeatureInfoUrl';\r\n\r\n        const url = source[fallbackOl5](\r\n            coordinate,\r\n            view.getResolution(),\r\n            view.getProjection().getCode(),\r\n            {\r\n                INFO_FORMAT: 'application/json',\r\n                BUFFER: buffer, // Buffer es el \"hit tolerance\" para capas ráster\r\n                FEATURE_COUNT: 1,\r\n                EXCEPTIONS: 'application/json'\r\n            }\r\n        );\r\n\r\n        const geoserver = this.getGeoserver();\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                headers: geoserver.getHeaders(),\r\n                credentials: geoserver.getCredentials()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\r\n                    `${I18N.errors.getFeatures} ${response.status}`\r\n                );\r\n            }\r\n\r\n            const data = await response.json();\r\n            const features = this._formatGeoJSON.readFeatures(data);\r\n\r\n            return features;\r\n        } catch (err) {\r\n            showError(err.message, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @public\r\n     */\r\n    refresh() {\r\n        const source = this.getSource();\r\n\r\n        // Refrescamos el wms\r\n        source.refresh();\r\n\r\n        // Force refresh the tiles\r\n        const params = source.getParams();\r\n        params.t = new Date().getMilliseconds();\r\n        source.updateParams(params);\r\n    }\r\n\r\n    /**\r\n     * Use this to update Geoserver Wfs Vendors (https://docs.geoserver.org/latest/en/user/services/wfs/vendor.html)\r\n     * and other arguements (https://docs.geoserver.org/stable/en/user/services/wfs/reference.html)\r\n     * in all the getFeature requests.\r\n     *\r\n     * Example: you can use this to set a cql_filter, limit the numbers of features, etc.\r\n     *\r\n     * @public\r\n     * @param paramName\r\n     * @param value\r\n     * @param refresh\r\n     */\r\n    setCustomParam(\r\n        paramName: string,\r\n        value: string = null,\r\n        refresh = true\r\n    ): URLSearchParams {\r\n        const source = this.getSource();\r\n\r\n        source.updateParams({\r\n            [paramName]: value\r\n        });\r\n\r\n        if (refresh) {\r\n            this.refresh();\r\n        }\r\n\r\n        return source.getParams();\r\n    }\r\n}\r\n","var img = \"data:image/svg+xml,%3csvg version='1.1' xmlns='http://www.w3.org/2000/svg' width='512' height='512' viewBox='0 0 512 512'%3e%3cpath d='M240 352h-240v128h480v-128h-240zM448 416h-64v-32h64v32zM112 160l128-128 128 128h-80v160h-96v-160z'%3e%3c/path%3e%3c/svg%3e\";\n  export default img;","var img = \"data:image/svg+xml,%3csvg version='1.1' xmlns='http://www.w3.org/2000/svg' width='768' height='768' viewBox='0 0 768 768'%3e %3cpath d='M663 225l-58.5 58.5-120-120 58.5-58.5q9-9 22.5-9t22.5 9l75 75q9 9 9 22.5t-9 22.5zM96 552l354-354 120 120-354 354h-120v-120z'%3e%3c/path%3e%3c/svg%3e\";\n  export default img;","var img = \"data:image/svg+xml,%3csvg version='1.1' xmlns='http://www.w3.org/2000/svg' width='768' height='768' viewBox='0 0 768 768'%3e%3cpath d='M384 288q39 0 67.5 28.5t28.5 67.5-28.5 67.5-67.5 28.5-67.5-28.5-28.5-67.5 28.5-67.5 67.5-28.5zM384 544.5q66 0 113.25-47.25t47.25-113.25-47.25-113.25-113.25-47.25-113.25 47.25-47.25 113.25 47.25 113.25 113.25 47.25zM384 144q118.5 0 214.5 66t138 174q-42 108-138 174t-214.5 66-214.5-66-138-174q42-108 138-174t214.5-66z'%3e%3c/path%3e%3c/svg%3e\";\n  export default img;","var img = \"data:image/svg+xml,%3csvg version='1.1' xmlns='http://www.w3.org/2000/svg' width='768' height='768' viewBox='0 0 768 768'%3e%3cpath d='M379.5 288h4.5q39 0 67.5 28.5t28.5 67.5v6zM241.5 313.5q-18 36-18 70.5 0 66 47.25 113.25t113.25 47.25q34.5 0 70.5-18l-49.5-49.5q-12 3-21 3-39 0-67.5-28.5t-28.5-67.5q0-9 3-21zM64.5 136.5l40.5-40.5 567 567-40.5 40.5q-7.5-7.5-47.25-46.5t-60.75-60q-64.5 27-139.5 27-118.5 0-214.5-66t-138-174q16.5-39 51.75-86.25t68.25-72.75q-18-18-50.25-51t-36.75-37.5zM384 223.5q-30 0-58.5 12l-69-69q58.5-22.5 127.5-22.5 118.5 0 213.75 66t137.25 174q-36 88.5-109.5 151.5l-93-93q12-28.5 12-58.5 0-66-47.25-113.25t-113.25-47.25z'%3e%3c/path%3e%3c/svg%3e\";\n  export default img;","export default function createElement(tagName, attrs = {}, ...children) {\r\n    if (typeof tagName === 'function') return tagName(attrs, children);\r\n\r\n    const elem =\r\n        tagName === null\r\n            ? new DocumentFragment()\r\n            : document.createElement(tagName);\r\n\r\n    Object.entries(attrs || {}).forEach(([name, value]) => {\r\n        if (\r\n            typeof value !== undefined &&\r\n            value !== null &&\r\n            value !== undefined\r\n        ) {\r\n            if (name.startsWith('on') && name.toLowerCase() in window)\r\n                elem.addEventListener(name.toLowerCase().substr(2), value);\r\n            else {\r\n                if (name === 'className')\r\n                    elem.setAttribute('class', value.toString());\r\n                else if (name === 'htmlFor')\r\n                    elem.setAttribute('for', value.toString());\r\n                else elem.setAttribute(name, value.toString());\r\n            }\r\n        }\r\n    });\r\n\r\n    for (const child of children) {\r\n        if (!child) continue;\r\n        if (Array.isArray(child)) elem.append(...child);\r\n        else {\r\n            if (child.nodeType === undefined) elem.innerHTML += child;\r\n            else elem.appendChild(child);\r\n        }\r\n    }\r\n    return elem;\r\n}\r\n","import Observable from 'ol/Observable.js';\r\n\r\nimport { Options, WfsLayer, WmsLayer } from '../ol-wfst';\r\n\r\nimport uploadSvg from '../assets/images/upload.svg';\r\nimport drawSvg from '../assets/images/draw.svg';\r\nimport visibilityOn from '../assets/images/visibilityOn.svg';\r\nimport visibilityOff from '../assets/images/visibilityOff.svg';\r\n\r\nimport { GeometryType } from '../@enums';\r\nimport {\r\n    getActiveLayerToInsertEls,\r\n    getStoredMapLayers,\r\n    setActiveLayerToInsertEls\r\n} from './state';\r\nimport { I18N } from './i18n';\r\nimport Uploads from './Uploads';\r\nimport { BaseLayerProperty } from './base/BaseLayer';\r\n\r\nimport myPragma from '../myPragma';\r\n\r\n/**\r\n * Removes in the DOM the class of the tools\r\n * @private\r\n */\r\nexport const resetStateButtons = (): void => {\r\n    const activeBtn = document.querySelector(\r\n        '.ol-wfst--tools-control-btn.wfst--active'\r\n    );\r\n    if (activeBtn) {\r\n        activeBtn.classList.remove('wfst--active');\r\n    }\r\n};\r\n\r\nexport const activateModeButtons = () => {\r\n    const btn = document.querySelector('.ol-wfst--tools-control-btn-edit');\r\n    if (btn) {\r\n        btn.classList.add('wfst--active');\r\n    }\r\n};\r\n\r\nexport const activateDrawButton = () => {\r\n    const btn = document.querySelector('.ol-wfst--tools-control-btn-draw');\r\n    if (btn) {\r\n        btn.classList.add('wfst--active');\r\n    }\r\n};\r\n\r\nexport default class LayersControl extends Observable {\r\n    protected _uploads: Uploads;\r\n    protected _uploadFormats: Options['uploadFormats'];\r\n\r\n    constructor(uploads: Uploads, uploadFormats: Options['uploadFormats']) {\r\n        super();\r\n\r\n        this._uploads = uploads;\r\n        this._uploadFormats = uploadFormats;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param layer\r\n     * @public\r\n     */\r\n    addLayerEl(layer: WfsLayer | WmsLayer): HTMLElement {\r\n        const container = document.querySelector(\r\n            '.wfst--tools-control--select-layers'\r\n        );\r\n\r\n        const layerName = layer.get(BaseLayerProperty.NAME) as string;\r\n        const checked =\r\n            layer === getActiveLayerToInsertEls() ? { checked: true } : {};\r\n\r\n        const input = (\r\n            <input\r\n                value={layerName}\r\n                id={`wfst--${layerName}`}\r\n                type=\"radio\"\r\n                className=\"ol-wfst--tools-control-input\"\r\n                name=\"wfst--select-layer\"\r\n                {...checked}\r\n                onChange={(evt) => this._layerChangeHandler(evt, layer)}\r\n            />\r\n        );\r\n\r\n        const layerDom = (\r\n            <div\r\n                className={`wfst--layer-control \r\n                            ${layer.getVisible() ? 'ol-wfst--visible-on' : ''}\r\n                            ${\r\n                                layer === getActiveLayerToInsertEls()\r\n                                    ? 'ol-wfst--selected-on'\r\n                                    : ''\r\n                            }`}\r\n                data-layer={layerName}\r\n            >\r\n                <div className=\"ol-wfst--tools-control-visible\">\r\n                    <span\r\n                        className=\"ol-wfst--tools-control-visible-btn ol-wfst--visible-btn-on\"\r\n                        title={I18N.labels.toggleVisibility}\r\n                        onClick={(evt) => this._visibilityClickHandler(evt)}\r\n                    >\r\n                        <img src={visibilityOn} />\r\n                    </span>\r\n                    <span\r\n                        className=\"ol-wfst--tools-control-visible-btn ol-wfst--visible-btn-off\"\r\n                        title={I18N.labels.toggleVisibility}\r\n                        onClick={(evt) => this._visibilityClickHandler(evt)}\r\n                    >\r\n                        <img src={visibilityOff} />\r\n                    </span>\r\n                </div>\r\n                <label htmlFor={`wfst--${layerName}`}>\r\n                    {input}\r\n                    <span\r\n                        title={layer.getDescribeFeatureType()._parsed.geomType}\r\n                    >\r\n                        {layer.get(BaseLayerProperty.LABEL)}\r\n                    </span>\r\n                </label>\r\n            </div>\r\n        );\r\n\r\n        container.appendChild(layerDom);\r\n\r\n        if (layer === getActiveLayerToInsertEls()) {\r\n            input.dispatchEvent(new Event('change'));\r\n        }\r\n\r\n        return layerDom;\r\n    }\r\n\r\n    /**\r\n     * Update geom Types availibles to select for this layer\r\n     *\r\n     * @param layerName\r\n     * @param geomDrawTypeSelected\r\n     * @private\r\n     */\r\n    _changeStateSelect(\r\n        layer: WmsLayer | WfsLayer,\r\n        geomDrawTypeSelected: GeometryType = null\r\n    ): GeometryType {\r\n        /**\r\n         * Set the geometry type in the select according to the geometry of\r\n         * the layer in the geoserver and disable what does not correspond.\r\n         *\r\n         * @param value\r\n         * @param options\r\n         * @private\r\n         */\r\n        const setSelectState = (\r\n            value: GeometryType,\r\n            options: Array<string> | 'all'\r\n        ): void => {\r\n            Array.from(selectDraw.options).forEach(\r\n                (option: HTMLOptionElement) => {\r\n                    option.selected = option.value === value ? true : false;\r\n                    option.disabled =\r\n                        options === 'all'\r\n                            ? false\r\n                            : options.includes(option.value)\r\n                            ? false\r\n                            : true;\r\n                    option.title = option.disabled\r\n                        ? I18N.labels.geomTypeNotSupported\r\n                        : '';\r\n                }\r\n            );\r\n        };\r\n\r\n        const selectDraw = document.querySelector(\r\n            '.wfst--tools-control--select-draw'\r\n        ) as HTMLSelectElement;\r\n\r\n        let drawType: GeometryType;\r\n\r\n        if (selectDraw) {\r\n            const geomLayer = layer.getDescribeFeatureType()._parsed.geomType;\r\n\r\n            if (geomDrawTypeSelected) {\r\n                drawType = selectDraw.value as GeometryType;\r\n            } else {\r\n                if (geomLayer === GeometryType.GeometryCollection) {\r\n                    drawType = GeometryType.LineString; // Default drawing type for GeometryCollection\r\n                    setSelectState(drawType, 'all');\r\n                } else if (geomLayer === GeometryType.LinearRing) {\r\n                    drawType = GeometryType.LineString; // Default drawing type for GeometryCollection\r\n                    setSelectState(drawType, [\r\n                        GeometryType.Circle,\r\n                        GeometryType.LinearRing,\r\n                        GeometryType.Polygon\r\n                    ]);\r\n                    selectDraw.value = drawType;\r\n                } else {\r\n                    drawType = geomLayer;\r\n                    setSelectState(drawType, [geomLayer]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return drawType;\r\n    }\r\n\r\n    _visibilityClickHandler(evt) {\r\n        const btn = evt.currentTarget;\r\n        const parentDiv = btn.closest('.wfst--layer-control') as HTMLElement;\r\n        const layerName = parentDiv.dataset['layer'];\r\n        parentDiv.classList.toggle('ol-wfst--visible-on');\r\n        const layer = getStoredMapLayers()[layerName];\r\n        if (parentDiv.classList.contains('ol-wfst--visible-on')) {\r\n            layer.setVisible(true);\r\n        } else {\r\n            layer.setVisible(false);\r\n        }\r\n    }\r\n\r\n    _layerChangeHandler(evt, layer) {\r\n        const radioInput = evt.currentTarget;\r\n        const parentDiv = radioInput.closest(\r\n            '.wfst--layer-control'\r\n        ) as HTMLElement;\r\n\r\n        // Deselect DOM previous layer\r\n        const selected = document.querySelector('.ol-wfst--selected-on');\r\n\r\n        if (selected) selected.classList.remove('ol-wfst--selected-on');\r\n\r\n        // Select this layer\r\n        parentDiv.classList.add('ol-wfst--selected-on');\r\n        setActiveLayerToInsertEls(layer);\r\n        this._changeStateSelect(layer);\r\n    }\r\n\r\n    render(): HTMLElement {\r\n        return (\r\n            <>\r\n                <div className=\"wfst--tools-control--head\">\r\n                    {this._uploads && (\r\n                        <div>\r\n                            <input\r\n                                id=\"ol-wfst--upload\"\r\n                                type=\"file\"\r\n                                accept={this._uploadFormats}\r\n                                onChange={(evt) => this._uploads.process(evt)}\r\n                            />\r\n                            <label\r\n                                className=\"ol-wfst--tools-control-btn ol-wfst--tools-control-btn-upload\"\r\n                                htmlFor=\"ol-wfst--upload\"\r\n                                title={I18N.labels.uploadToLayer}\r\n                            >\r\n                                <img src={uploadSvg} />\r\n                            </label>\r\n                        </div>\r\n                    )}\r\n                    <div className=\"ol-wfst--tools-control-draw-cnt\">\r\n                        <button\r\n                            className=\"ol-wfst--tools-control-btn ol-wfst--tools-control-btn-draw\"\r\n                            type=\"button\"\r\n                            title={I18N.labels.addElement}\r\n                            onClick={() => {\r\n                                this.dispatchEvent('drawMode');\r\n                            }}\r\n                        >\r\n                            <img src={drawSvg} />\r\n                        </button>\r\n                        <select\r\n                            title={I18N.labels.selectDrawType}\r\n                            className=\"wfst--tools-control--select-draw\"\r\n                            onChange={(evt: Event) => {\r\n                                const selectedValue = (\r\n                                    evt.target as HTMLSelectElement\r\n                                ).value as GeometryType;\r\n                                this._changeStateSelect(\r\n                                    getActiveLayerToInsertEls(),\r\n                                    selectedValue\r\n                                );\r\n                                this.dispatchEvent('changeGeom');\r\n                            }}\r\n                        >\r\n                            {[\r\n                                GeometryType.Point,\r\n                                GeometryType.MultiPoint,\r\n                                GeometryType.LineString,\r\n                                GeometryType.MultiLineString,\r\n                                GeometryType.Polygon,\r\n                                GeometryType.MultiPolygon,\r\n                                GeometryType.Circle\r\n                            ].map((type) => {\r\n                                // Show all options, but enable only the accepted ones\r\n                                return <option value={type}>{type}</option>;\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"wfst--tools-control--select-layers\"></div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import VectorLayer from 'ol/layer/Vector.js';\r\nimport VectorSource from 'ol/source/Vector.js';\r\n\r\nlet editLayer = new VectorLayer({\r\n    source: new VectorSource(),\r\n    zIndex: 100\r\n});\r\n\r\nexport const getEditLayer = (): VectorLayer<VectorSource> => {\r\n    return editLayer;\r\n};\r\n","// Ol\r\nimport {\r\n    Geometry,\r\n    LineString,\r\n    MultiLineString,\r\n    MultiPoint,\r\n    MultiPolygon,\r\n    Point,\r\n    Polygon\r\n} from 'ol/geom.js';\r\nimport Feature from 'ol/Feature.js';\r\nimport Observable from 'ol/Observable.js';\r\nimport GeoJSON from 'ol/format/GeoJSON.js';\r\nimport KML from 'ol/format/KML.js';\r\nimport WFS from 'ol/format/WFS.js';\r\nimport { VectorSourceEvent } from 'ol/source/Vector.js';\r\nimport { BaseLayerProperty } from './base/BaseLayer.js';\r\n\r\n// External\r\nimport Modal from 'modal-vanilla';\r\n\r\nimport { Options } from '../ol-wfst';\r\nimport { showError } from './errors';\r\nimport { resetStateButtons } from './LayersControl';\r\nimport { getEditLayer } from './editLayer';\r\nimport { getActiveLayerToInsertEls, getMap } from './state';\r\nimport { GeometryType } from '../@enums';\r\nimport { I18N } from './i18n';\r\n\r\nexport default class Uploads extends Observable {\r\n    protected _options: Options;\r\n\r\n    // Formats\r\n    protected _formatWFS: WFS;\r\n    protected _formatGeoJSON: GeoJSON;\r\n    protected _formatKml: KML;\r\n    protected _xs: XMLSerializer;\r\n\r\n    protected _processUpload: Options['processUpload'];\r\n\r\n    constructor(options: Options) {\r\n        super();\r\n\r\n        this._options = options;\r\n\r\n        this._processUpload = options.processUpload;\r\n\r\n        // Formats\r\n        this._formatWFS = new WFS();\r\n\r\n        this._formatGeoJSON = new GeoJSON();\r\n        this._formatKml = new KML({\r\n            extractStyles: false,\r\n            showPointNames: false\r\n        });\r\n        this._xs = new XMLSerializer();\r\n    }\r\n\r\n    /**\r\n     * Parse and check geometry of uploaded files\r\n     *\r\n     * @param evt\r\n     * @public\r\n     */\r\n    async process(evt: Event): Promise<void> {\r\n        const map = getMap();\r\n        const view = map.getView();\r\n\r\n        const file = (evt.target as HTMLInputElement).files[0];\r\n\r\n        let features: Array<Feature<Geometry>>;\r\n\r\n        if (!file) {\r\n            return;\r\n        }\r\n\r\n        const extension = file.name.split('.').pop().toLowerCase();\r\n\r\n        try {\r\n            // If the user uses a custom fucntion...\r\n            if (this._processUpload) {\r\n                features = this._processUpload(file);\r\n            }\r\n\r\n            // If the user functions return features, we dont process anything more\r\n            if (!features) {\r\n                const string = await this._fileReader(file);\r\n\r\n                if (extension === 'geojson' || extension === 'json') {\r\n                    features = this._formatGeoJSON.readFeatures(string, {\r\n                        featureProjection: view.getProjection().getCode()\r\n                    });\r\n                } else if (extension === 'kml') {\r\n                    features = this._formatKml.readFeatures(string, {\r\n                        featureProjection: view.getProjection().getCode()\r\n                    });\r\n                } else {\r\n                    showError(I18N.errors.badFormat);\r\n                }\r\n            }\r\n\r\n            let invalidFeaturesCount = 0;\r\n            let validFeaturesCount = 0;\r\n\r\n            const featuresToInsert: Array<Feature<Geometry>> = [];\r\n\r\n            for (let feature of features) {\r\n                // If the geometry doesn't correspond to the layer, try to fixit.\r\n                // If we can't, don't use it\r\n                if (!this._checkGeometry(feature)) {\r\n                    feature = this._fixGeometry(feature);\r\n                }\r\n\r\n                if (feature) {\r\n                    featuresToInsert.push(feature);\r\n                    validFeaturesCount++;\r\n                } else {\r\n                    invalidFeaturesCount++;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if (!validFeaturesCount) {\r\n                showError(I18N.errors.noValidGeometry);\r\n            } else {\r\n                resetStateButtons();\r\n\r\n                this.dispatchEvent(\r\n                    new VectorSourceEvent(\r\n                        'loadedFeatures',\r\n                        null,\r\n                        featuresToInsert\r\n                    )\r\n                );\r\n\r\n                const content = `\r\n            ${I18N.labels.validFeatures}: ${validFeaturesCount}<br>\r\n            ${\r\n                invalidFeaturesCount\r\n                    ? `${I18N.labels.invalidFeatures}: ${invalidFeaturesCount}`\r\n                    : ''\r\n            }`;\r\n\r\n                this._initModal(content, featuresToInsert);\r\n            }\r\n\r\n            // Reset the input to allow another onChange trigger\r\n            (evt.target as HTMLInputElement).value = null;\r\n        } catch (err) {\r\n            showError(I18N.errors.badFile, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Read data file\r\n     * @param file\r\n     * @public\r\n     */\r\n    async _fileReader(file: File): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n\r\n            reader.addEventListener('load', async (e) => {\r\n                const fileData = e.target.result;\r\n                resolve(fileData as string);\r\n            });\r\n\r\n            reader.addEventListener('error', (err) => {\r\n                console.error('Error' + err);\r\n                reject();\r\n            });\r\n            reader.readAsText(file);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attemp to change the geometry feature to the layer\r\n     * @param feature\r\n     * @private\r\n     */\r\n    _fixGeometry(feature: Feature<Geometry>): Feature<Geometry> {\r\n        // Geometry of the layer\r\n        const geomTypeLayer =\r\n            getActiveLayerToInsertEls().getDescribeFeatureType()._parsed\r\n                .geomType;\r\n        const geomTypeFeature = feature.getGeometry().getType();\r\n        let geom: Geometry;\r\n\r\n        switch (geomTypeFeature) {\r\n            case GeometryType.Point: {\r\n                if (geomTypeLayer === GeometryType.MultiPoint) {\r\n                    const coords = (\r\n                        feature.getGeometry() as Point\r\n                    ).getCoordinates();\r\n                    geom = new MultiPoint([coords]);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case GeometryType.LineString:\r\n                if (geomTypeLayer === GeometryType.MultiLineString) {\r\n                    const coords = (\r\n                        feature.getGeometry() as LineString\r\n                    ).getCoordinates();\r\n                    geom = new MultiLineString([coords]);\r\n                }\r\n                break;\r\n\r\n            case GeometryType.Polygon:\r\n                if (geomTypeLayer === GeometryType.MultiPolygon) {\r\n                    const coords = (\r\n                        feature.getGeometry() as Polygon\r\n                    ).getCoordinates();\r\n                    geom = new MultiPolygon([coords]);\r\n                }\r\n                break;\r\n            default:\r\n                geom = null;\r\n        }\r\n\r\n        if (!geom) {\r\n            return null;\r\n        }\r\n\r\n        feature.setGeometry(geom);\r\n        return feature;\r\n    }\r\n\r\n    /**\r\n     * Check if the feature has the same geometry as the target layer\r\n     * @param feature\r\n     * @private\r\n     */\r\n    _checkGeometry(feature: Feature<Geometry>): boolean {\r\n        // Geometry of the layer\r\n        const geomTypeLayer =\r\n            getActiveLayerToInsertEls().getDescribeFeatureType()._parsed\r\n                .geomType;\r\n        const geomTypeFeature = feature.getGeometry().getType();\r\n\r\n        // This geom accepts every type of geometry\r\n        if (geomTypeLayer === GeometryType.GeometryCollection) {\r\n            return true;\r\n        }\r\n\r\n        return geomTypeFeature === geomTypeLayer;\r\n    }\r\n\r\n    /**\r\n     * Confirm modal before transact to the GeoServer the features in the file\r\n     *\r\n     * @param content\r\n     * @param featuresToInsert\r\n     * @private\r\n     */\r\n    _initModal(\r\n        content: string,\r\n        featuresToInsert: Array<Feature<Geometry>>\r\n    ): void {\r\n        const footer = `\r\n        <button type=\"button\" class=\"btn btn-sm btn-secondary\" data-dismiss=\"modal\">\r\n            ${I18N.labels.cancel}\r\n        </button>\r\n        <button type=\"button\" class=\"btn btn-sm btn-primary\" data-action=\"save\" data-dismiss=\"modal\">\r\n            ${I18N.labels.upload}\r\n        </button>\r\n    `;\r\n\r\n        const modal = new Modal({\r\n            ...this._options.modal,\r\n            header: true,\r\n            headerClose: false,\r\n            title:\r\n                I18N.labels.uploadFeatures +\r\n                ' ' +\r\n                getActiveLayerToInsertEls().get(BaseLayerProperty.NAME),\r\n            content: content,\r\n            backdrop: 'static', // Prevent close on click outside the modal\r\n            footer: footer\r\n        }).show();\r\n\r\n        modal.on('dismiss', (modal, event) => {\r\n            // On saving changes\r\n            if (event.target.dataset.action === 'save') {\r\n                this.dispatchEvent(\r\n                    new VectorSourceEvent(\r\n                        'addedFeatures',\r\n                        null,\r\n                        featuresToInsert\r\n                    )\r\n                );\r\n            } else {\r\n                // On cancel button\r\n                getEditLayer().getSource().clear();\r\n            }\r\n        });\r\n    }\r\n}\r\n","/**\r\n * @param target\r\n * @param sources\r\n * @returns\r\n */\r\nexport const deepObjectAssign = (target, ...sources) => {\r\n    sources.forEach((source) => {\r\n        Object.keys(source).forEach((key) => {\r\n            const s_val = source[key];\r\n            const t_val = target[key];\r\n            target[key] =\r\n                t_val &&\r\n                s_val &&\r\n                typeof t_val === 'object' &&\r\n                typeof s_val === 'object' &&\r\n                !Array.isArray(t_val) // Don't merge arrays\r\n                    ? deepObjectAssign(t_val, s_val)\r\n                    : s_val;\r\n        });\r\n    });\r\n    return target;\r\n};\r\n","import { I18N } from './modules/i18n';\r\nimport { Options } from './ol-wfst';\r\n\r\nexport const DEFAULT_LANGUAGE = 'en';\r\n\r\nexport const getDefaultOptions = (): Options => {\r\n    return {\r\n        layers: null,\r\n        evtType: 'singleclick',\r\n        active: true,\r\n        showControl: true,\r\n        language: DEFAULT_LANGUAGE,\r\n        uploadFormats: '.geojson,.json,.kml',\r\n        processUpload: null,\r\n        modal: {\r\n            animateClass: 'fade',\r\n            animateInClass: 'show',\r\n            transition: 300,\r\n            backdropTransition: 150,\r\n            templates: {\r\n                dialog: '<div class=\"modal-dialog modal-dialog-centered\"></div>',\r\n                headerClose: `<button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-label=\"${I18N.labels.close}\"><span aria-hidden=\"true\">×</span></button>`\r\n            }\r\n        }\r\n    };\r\n};\r\n","import Feature from 'ol/Feature.js';\r\nimport Geometry from 'ol/geom/Geometry.js';\r\nimport Control from 'ol/control/Control.js';\r\nimport { VectorSourceEvent } from 'ol/source/Vector.js';\r\nimport { CombinedOnSignature, EventTypes, OnSignature } from 'ol/Observable.js';\r\nimport BaseEvent from 'ol/events/Event.js';\r\nimport { EventsKey } from 'ol/events.js';\r\nimport { ObjectEvent } from 'ol/Object.js';\r\nimport { Types as ObjectEventTypes } from 'ol/ObjectEventType.js';\r\n\r\nimport { I18N } from './i18n';\r\n\r\nimport myPragma from '../myPragma';\r\n\r\ntype ChangesEventTypes = 'cancel' | 'apply' | 'delete';\r\n\r\nexport default class EditControlChangesEl extends Control {\r\n    declare on: OnSignature<EventTypes, BaseEvent, EventsKey> &\r\n        OnSignature<ChangesEventTypes, VectorSourceEvent, EventsKey> &\r\n        OnSignature<ObjectEventTypes, ObjectEvent, EventsKey> &\r\n        CombinedOnSignature<\r\n            ChangesEventTypes | ObjectEventTypes | EventTypes,\r\n            EventsKey\r\n        >;\r\n\r\n    declare once: OnSignature<EventTypes, BaseEvent, EventsKey> &\r\n        OnSignature<ChangesEventTypes, VectorSourceEvent, EventsKey> &\r\n        OnSignature<ObjectEventTypes, ObjectEvent, EventsKey> &\r\n        CombinedOnSignature<\r\n            ChangesEventTypes | ObjectEventTypes | EventTypes,\r\n            EventsKey\r\n        >;\r\n\r\n    declare un: OnSignature<EventTypes, BaseEvent, void> &\r\n        OnSignature<ChangesEventTypes, VectorSourceEvent, EventsKey> &\r\n        OnSignature<ObjectEventTypes, ObjectEvent, void> &\r\n        CombinedOnSignature<\r\n            ChangesEventTypes | ObjectEventTypes | EventTypes,\r\n            void\r\n        >;\r\n\r\n    constructor(feature: Feature<Geometry>) {\r\n        super({\r\n            element: (\r\n                <div className=\"ol-wfst--changes-control\">\r\n                    <div className=\"ol-wfst--changes-control-el\">\r\n                        <div className=\"ol-wfst--changes-control-id\">\r\n                            <b>{I18N.labels.editMode}</b> -{' '}\r\n                            <i>{String(feature.getId())}</i>\r\n                        </div>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-sm btn-secondary\"\r\n                            onClick={() => {\r\n                                this.dispatchEvent(\r\n                                    new VectorSourceEvent('cancel', feature)\r\n                                );\r\n                            }}\r\n                        >\r\n                            {I18N.labels.cancel}\r\n                        </button>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-sm btn-primary\"\r\n                            onClick={() => {\r\n                                this.dispatchEvent(\r\n                                    new VectorSourceEvent('apply', feature)\r\n                                );\r\n                            }}\r\n                        >\r\n                            {I18N.labels.apply}\r\n                        </button>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-sm btn-danger-outline\"\r\n                            onClick={() => {\r\n                                this.dispatchEvent(\r\n                                    new VectorSourceEvent('delete', feature)\r\n                                );\r\n                            }}\r\n                        >\r\n                            {I18N.labels.delete}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        });\r\n    }\r\n}\r\n","// Ol\r\nimport {\r\n    Geometry,\r\n    GeometryCollection,\r\n    LineString,\r\n    MultiLineString,\r\n    MultiPoint,\r\n    MultiPolygon,\r\n    Polygon\r\n} from 'ol/geom.js';\r\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style.js';\r\nimport Feature, { FeatureLike } from 'ol/Feature.js';\r\nimport { Coordinate } from 'ol/coordinate.js';\r\n\r\nimport { GeometryType } from '../@enums';\r\nimport { getMode, Modes } from './state';\r\n\r\n/**\r\n * Master style that handles two modes on the Edit Layer:\r\n * - one is the basic, showing only the vertices\r\n * - and the other when modify is active, showing bigger vertices\r\n *\r\n * @param feature\r\n * @private\r\n */\r\nexport default function styleFunction(\r\n    feature: Feature<Geometry>\r\n): Array<Style> {\r\n    const getVertexs = (feature: FeatureLike) => {\r\n        let geometry = feature.getGeometry();\r\n\r\n        if (geometry instanceof GeometryCollection) {\r\n            geometry = geometry.getGeometries()[0];\r\n        }\r\n\r\n        const coordinates = (geometry as LineString).getCoordinates();\r\n        let flatCoordinates: Coordinate[] | number[] = null;\r\n\r\n        if (\r\n            geometry instanceof Polygon ||\r\n            geometry instanceof MultiLineString\r\n        ) {\r\n            flatCoordinates = coordinates.flat(1);\r\n        } else if (geometry instanceof MultiPolygon) {\r\n            flatCoordinates = coordinates.flat(2);\r\n        } else {\r\n            flatCoordinates = coordinates;\r\n        }\r\n\r\n        if (!flatCoordinates || !flatCoordinates.length) {\r\n            return;\r\n        }\r\n\r\n        return new MultiPoint(flatCoordinates as Coordinate[]);\r\n    };\r\n\r\n    let geometry = feature.getGeometry();\r\n    let type = geometry.getType();\r\n\r\n    if (geometry instanceof GeometryCollection) {\r\n        geometry = geometry.getGeometries()[0];\r\n        type = geometry.getType();\r\n    }\r\n\r\n    switch (type) {\r\n        case GeometryType.Point:\r\n        case GeometryType.MultiPoint:\r\n            if (getMode() === Modes.Edit) {\r\n                return [\r\n                    new Style({\r\n                        image: new CircleStyle({\r\n                            radius: 6,\r\n                            fill: new Fill({\r\n                                color: '#000000'\r\n                            })\r\n                        })\r\n                    }),\r\n                    new Style({\r\n                        image: new CircleStyle({\r\n                            radius: 4,\r\n                            fill: new Fill({\r\n                                color: '#ff0000'\r\n                            })\r\n                        })\r\n                    })\r\n                ];\r\n            } else {\r\n                return [\r\n                    new Style({\r\n                        image: new CircleStyle({\r\n                            radius: 5,\r\n                            fill: new Fill({\r\n                                color: '#ff0000'\r\n                            })\r\n                        })\r\n                    }),\r\n                    new Style({\r\n                        image: new CircleStyle({\r\n                            radius: 2,\r\n                            fill: new Fill({\r\n                                color: '#000000'\r\n                            })\r\n                        })\r\n                    })\r\n                ];\r\n            }\r\n        default:\r\n            // If editing mode is active, show bigger vertex\r\n            if (getMode() == Modes.Draw || getMode() == Modes.Edit) {\r\n                return [\r\n                    new Style({\r\n                        stroke: new Stroke({\r\n                            color: 'rgba( 255, 0, 0, 1)',\r\n                            width: 4\r\n                        }),\r\n                        fill: new Fill({\r\n                            color: 'rgba(255, 0, 0, 0.7)'\r\n                        })\r\n                    }),\r\n                    new Style({\r\n                        image: new CircleStyle({\r\n                            radius: 4,\r\n                            fill: new Fill({\r\n                                color: '#ff0000'\r\n                            }),\r\n                            stroke: new Stroke({\r\n                                width: 2,\r\n                                color: 'rgba(5, 5, 5, 0.9)'\r\n                            })\r\n                        }),\r\n                        geometry: (feature) => getVertexs(feature)\r\n                    }),\r\n                    new Style({\r\n                        stroke: new Stroke({\r\n                            color: 'rgba(255, 255, 255, 0.7)',\r\n                            width: 2\r\n                        })\r\n                    })\r\n                ];\r\n            } else {\r\n                return [\r\n                    new Style({\r\n                        image: new CircleStyle({\r\n                            radius: 2,\r\n                            fill: new Fill({\r\n                                color: '#000000'\r\n                            })\r\n                        }),\r\n                        geometry: (feature) => getVertexs(feature)\r\n                    }),\r\n                    new Style({\r\n                        stroke: new Stroke({\r\n                            color: '#ff0000',\r\n                            width: 4\r\n                        }),\r\n                        fill: new Fill({\r\n                            color: 'rgba(255, 0, 0, 0.7)'\r\n                        })\r\n                    })\r\n                ];\r\n            }\r\n    }\r\n}\r\n","// Ol\r\nimport Observable from 'ol/Observable.js';\r\nimport Feature from 'ol/Feature.js';\r\nimport Geometry from 'ol/geom/Geometry.js';\r\nimport { VectorSourceEvent } from 'ol/source/Vector.js';\r\n\r\n// External\r\nimport Modal from 'modal-vanilla';\r\n\r\nimport { addFeatureToEditedList, getStoredLayer } from './state';\r\nimport { Options } from '../ol-wfst';\r\nimport { I18N } from './i18n';\r\n\r\n/**\r\n * Shows a fields form in a modal window to allow changes in the properties of the feature.\r\n *\r\n * @param feature\r\n * @private\r\n */\r\nexport class EditFieldsModal extends Observable {\r\n    protected _options: Options['modal'];\r\n    protected _modal: Modal;\r\n    protected _feature: Feature;\r\n\r\n    constructor(options: Options['modal']) {\r\n        super();\r\n\r\n        this._options = options;\r\n\r\n        const footer = `\r\n            <button type=\"button\" class=\"btn btn-sm btn-link btn-third\" data-action=\"delete\" data-dismiss=\"modal\">\r\n                ${I18N.labels.delete}\r\n            </button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" data-dismiss=\"modal\">\r\n                ${I18N.labels.cancel}\r\n            </button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-primary\" data-action=\"save\" data-dismiss=\"modal\">\r\n                ${I18N.labels.save}\r\n            </button>\r\n        `;\r\n\r\n        this._modal = new Modal({\r\n            ...this._options,\r\n            header: true,\r\n            headerClose: true,\r\n            title: '',\r\n            content: '<div></div>',\r\n            footer: footer\r\n        });\r\n\r\n        this._modal.on('dismiss', (modal, event) => {\r\n            // On saving changes\r\n            if (event.target.dataset.action === 'save') {\r\n                const inputs = modal.el.querySelectorAll('input');\r\n\r\n                inputs.forEach((el: HTMLInputElement) => {\r\n                    const value = el.value;\r\n                    const field = el.name;\r\n                    this._feature.set(field, value, /*isSilent = */ true);\r\n                });\r\n\r\n                this._feature.changed();\r\n\r\n                addFeatureToEditedList(this._feature);\r\n\r\n                this.dispatchEvent(\r\n                    new VectorSourceEvent('save', this._feature)\r\n                );\r\n            } else if (event.target.dataset.action === 'delete') {\r\n                this.dispatchEvent(\r\n                    new VectorSourceEvent('delete', this._feature)\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    show(feature: Feature<Geometry>) {\r\n        this._feature = feature;\r\n\r\n        const title = `${I18N.labels.editElement} ${feature.getId()} `;\r\n\r\n        const properties = feature.getProperties();\r\n        const layerName = feature.get('_layerName_');\r\n\r\n        // Data schema from the geoserver\r\n        const layer = getStoredLayer(layerName);\r\n        const dataSchema = layer.getDescribeFeatureType()._parsed.properties;\r\n\r\n        let content = '<form autocomplete=\"false\">';\r\n        Object.keys(properties).forEach((key) => {\r\n            // If the feature field exists in the geoserver and is not added by openlayers\r\n            const field = dataSchema.find((data) => data.name === key);\r\n\r\n            if (field) {\r\n                const typeXsd = field.type;\r\n                let type;\r\n\r\n                switch (typeXsd) {\r\n                    case 'xsd:string':\r\n                        type = 'text';\r\n                        break;\r\n                    case 'xsd:number':\r\n                    case 'xsd:int':\r\n                        type = 'number';\r\n                        break;\r\n                    case 'xsd:date-time':\r\n                        type = 'datetime';\r\n                        break;\r\n                    default:\r\n                        type = 'text';\r\n                }\r\n\r\n                if (type) {\r\n                    content += `\r\n                <div class=\"ol-wfst--input-field-container\">\r\n                    <label class=\"ol-wfst--input-field-label\" for=\"${key}\">${key}</label>\r\n                    <input placeholder=\"NULL\" class=\"ol-wfst--input-field-input\" type=\"${type}\" name=\"${key}\" value=\"${\r\n                        properties[key] || ''\r\n                    }\">\r\n                </div>`;\r\n                }\r\n            }\r\n        });\r\n\r\n        content += '</form>';\r\n\r\n        this._modal._html.body.innerHTML = content;\r\n        this._modal._html.header.innerHTML = title;\r\n        this._modal.show();\r\n    }\r\n}\r\n","// Ol\r\nimport BaseObject, { ObjectEvent } from 'ol/Object.js';\r\nimport { Types as ObjectEventTypes } from 'ol/ObjectEventType.js';\r\n\r\nimport { ProjectionLike } from 'ol/proj.js';\r\nimport Circle from 'ol/geom/Circle.js';\r\nimport Geometry from 'ol/geom/Geometry.js';\r\nimport GeometryCollection from 'ol/geom/GeometryCollection.js';\r\nimport Feature from 'ol/Feature.js';\r\n\r\nimport GeoJSON from 'ol/format/GeoJSON.js';\r\nimport KML from 'ol/format/KML.js';\r\nimport WFS from 'ol/format/WFS.js';\r\n\r\nimport { State } from 'ol/source/Source.js';\r\nimport { fromCircle } from 'ol/geom/Polygon.js';\r\nimport BaseEvent from 'ol/events/Event.js';\r\nimport { CombinedOnSignature, EventTypes, OnSignature } from 'ol/Observable.js';\r\nimport { EventsKey } from 'ol/events.js';\r\nimport { TransactionResponse } from 'ol/format/WFS.js';\r\n\r\nimport { showLoading } from './modules/loading';\r\nimport { parseError, showError } from './modules/errors';\r\nimport {\r\n    getMap,\r\n    getStoredLayer,\r\n    removeFeatureFromEditList\r\n} from './modules/state';\r\nimport { getEditLayer } from './modules/editLayer';\r\nimport { deepObjectAssign } from './modules/helpers';\r\nimport { I18N } from './modules/i18n';\r\nimport { GeometryType, TransactionType } from './@enums';\r\nimport WmsLayer from './WmsLayer';\r\n\r\n// https://docs.geoserver.org/latest/en/user/services/wfs/axis_order.html\r\n// Axis ordering: latitude/longitude\r\nconst DEFAULT_GEOSERVER_SRS = 'EPSG:3857';\r\n\r\n/**\r\n * @fires change:capabilities\r\n * @extends {ol/Object~BaseObject}\r\n * @param options\r\n */\r\nexport default class Geoserver extends BaseObject {\r\n    protected _options: GeoserverOptions;\r\n\r\n    protected _countRequests: number;\r\n    protected _insertFeatures: Array<Feature<Geometry>>;\r\n    protected _updateFeatures: Array<Feature<Geometry>>;\r\n    protected _deleteFeatures: Array<Feature<Geometry>>;\r\n\r\n    // Formats\r\n    protected _formatWFS: WFS;\r\n    protected _formatGeoJSON: GeoJSON;\r\n    protected _formatKml: KML;\r\n    protected _xs: XMLSerializer;\r\n\r\n    protected state_: State;\r\n\r\n    declare on: OnSignature<EventTypes, BaseEvent, EventsKey> &\r\n        OnSignature<\r\n            GeoserverEventTypes | ObjectEventTypes,\r\n            ObjectEvent,\r\n            EventsKey\r\n        > &\r\n        CombinedOnSignature<\r\n            GeoserverEventTypes | ObjectEventTypes | EventTypes,\r\n            EventsKey\r\n        >;\r\n\r\n    declare once: OnSignature<EventTypes, BaseEvent, EventsKey> &\r\n        OnSignature<\r\n            GeoserverEventTypes | ObjectEventTypes,\r\n            ObjectEvent,\r\n            EventsKey\r\n        > &\r\n        CombinedOnSignature<\r\n            GeoserverEventTypes | ObjectEventTypes | EventTypes,\r\n            EventsKey\r\n        >;\r\n\r\n    declare un: OnSignature<EventTypes, BaseEvent, void> &\r\n        OnSignature<GeoserverEventTypes | ObjectEventTypes, ObjectEvent, void> &\r\n        CombinedOnSignature<\r\n            GeoserverEventTypes | ObjectEventTypes | EventTypes,\r\n            void\r\n        >;\r\n\r\n    constructor(options: GeoserverOptions) {\r\n        super();\r\n\r\n        const defaults = {\r\n            url: null,\r\n            advanced: {\r\n                getCapabilitiesVersion: '1.3.0',\r\n                getFeatureVersion: '1.0.0',\r\n                describeFeatureTypeVersion: '1.1.0',\r\n                lockFeatureVersion: '1.1.0',\r\n                wfsTransactionVersion: '1.1.0',\r\n                projection: DEFAULT_GEOSERVER_SRS,\r\n                lockFeatureParams: {\r\n                    expiry: 5, // minutes\r\n                    lockId: 'GeoServer',\r\n                    releaseAction: 'SOME'\r\n                }\r\n            },\r\n            headers: {},\r\n            credentials: 'same-origin',\r\n            useLockFeature: true\r\n        };\r\n\r\n        this._options = deepObjectAssign(defaults, options);\r\n\r\n        this.setAdvanced(this._options.advanced);\r\n        this.setHeaders(this._options.headers);\r\n        this.setCredentials(this._options.credentials);\r\n        this.setUrl(this._options.url);\r\n        this.setUseLockFeature(this._options.useLockFeature);\r\n\r\n        this._countRequests = 0;\r\n\r\n        this._insertFeatures = [];\r\n        this._updateFeatures = [];\r\n        this._deleteFeatures = [];\r\n\r\n        // Formats\r\n        this._formatWFS = new WFS();\r\n\r\n        this._formatGeoJSON = new GeoJSON();\r\n        this._formatKml = new KML({\r\n            extractStyles: false,\r\n            showPointNames: false\r\n        });\r\n        this._xs = new XMLSerializer();\r\n\r\n        this.getAndUpdateCapabilities();\r\n\r\n        this.on('change:capabilities', () => {\r\n            this._checkGeoserverCapabilities();\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    getCapabilities(): XMLDocument {\r\n        return this.get(GeoserverProperty.CAPABILITIES);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param url\r\n     * @param opt_silent\r\n     * @public\r\n     */\r\n    setUrl(url: string, opt_silent = false): void {\r\n        this.set(GeoserverProperty.URL, url, opt_silent);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    getUrl(): string {\r\n        return this.get(GeoserverProperty.URL);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param headers\r\n     * @param opt_silent\r\n     * @returns\r\n     * @public\r\n     */\r\n    setHeaders(headers: HeadersInit = {}, opt_silent = false): void {\r\n        return this.set(GeoserverProperty.HEADERS, headers, opt_silent);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    getHeaders(): HeadersInit {\r\n        return this.get(GeoserverProperty.HEADERS);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param credentials\r\n     * @param opt_silent\r\n     * @public\r\n     */\r\n    setCredentials(\r\n        credentials: RequestCredentials = null,\r\n        opt_silent = false\r\n    ): void {\r\n        this.set(GeoserverProperty.CREDENTIALS, credentials, opt_silent);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    getCredentials(): RequestCredentials {\r\n        return this.get(GeoserverProperty.CREDENTIALS);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    setAdvanced(advanced: GeoServerAdvanced = {}, opt_silent = false): void {\r\n        this.set(GeoserverProperty.ADVANCED, advanced, opt_silent);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    getAdvanced(): GeoServerAdvanced {\r\n        return this.get(GeoserverProperty.ADVANCED);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    hasTransaction(): boolean {\r\n        return this.get(GeoserverProperty.HASTRASNACTION);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    hasLockFeature(): boolean {\r\n        return this.get(GeoserverProperty.HASLOCKFEATURE);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    getUseLockFeature(): boolean {\r\n        return this.get(GeoserverProperty.USELOCKFEATURE);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    setUseLockFeature(useLockFeature: boolean, opt_silent = false): void {\r\n        this.set(GeoserverProperty.USELOCKFEATURE, useLockFeature, opt_silent);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     * @public\r\n     */\r\n    isLoaded(): boolean {\r\n        return this.get(GeoserverProperty.ISLOADED);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns\r\n     */\r\n    getState() {\r\n        return this.state_;\r\n    }\r\n\r\n    /**\r\n     * Get the capabilities from the GeoServer and check\r\n     * all the available operations.\r\n     *\r\n     * @fires getcapabilities\r\n     * @public\r\n     */\r\n    async getAndUpdateCapabilities(): Promise<XMLDocument> {\r\n        try {\r\n            const params = new URLSearchParams({\r\n                service: 'wfs',\r\n                version: this.getAdvanced().getCapabilitiesVersion,\r\n                request: 'GetCapabilities',\r\n                exceptions: 'application/json'\r\n            });\r\n\r\n            const url_fetch = this.getUrl() + '?' + params.toString();\r\n\r\n            const response = await fetch(url_fetch, {\r\n                headers: this.getHeaders(),\r\n                credentials: this.getCredentials()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('');\r\n            }\r\n\r\n            const data = await response.text();\r\n            const capabilities = new window.DOMParser().parseFromString(\r\n                data,\r\n                'text/xml'\r\n            );\r\n\r\n            this.set(GeoserverProperty.CAPABILITIES, capabilities);\r\n\r\n            this.state_ = capabilities ? 'ready' : 'error';\r\n\r\n            return capabilities;\r\n        } catch (err) {\r\n            console.error(err);\r\n            const msg =\r\n                typeof err === 'string' ? err : I18N.errors.capabilities;\r\n            showError(msg, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    _checkGeoserverCapabilities() {\r\n        // Available operations in the geoserver\r\n        const operations: HTMLCollectionOf<Element> =\r\n            this.getCapabilities().getElementsByTagName('ows:Operation');\r\n\r\n        Array.from(operations).forEach((operation) => {\r\n            if (operation.getAttribute('name') === 'Transaction') {\r\n                this.set(GeoserverProperty.HASTRASNACTION, true);\r\n            } else if (operation.getAttribute('name') === 'LockFeature') {\r\n                this.set(GeoserverProperty.HASLOCKFEATURE, true);\r\n            } else if (\r\n                operation.getAttribute('name') === 'DescribeFeatureType'\r\n            ) {\r\n                this.set(GeoserverProperty.HASDESCRIBEFEATURETYPE, true);\r\n            }\r\n        });\r\n\r\n        if (!this.hasTransaction()) {\r\n            throw I18N.errors.wfst;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make the WFS Transactions\r\n     *\r\n     * @param transactionType\r\n     * @param features\r\n     * @param layerName\r\n     * @private\r\n     */\r\n    async transact(\r\n        transactionType: TransactionType,\r\n        features: Array<Feature<Geometry>> | Feature<Geometry>,\r\n        layerName: string\r\n    ): Promise<TransactionResponse | false> {\r\n        features = (\r\n            Array.isArray(features) ? features : [features]\r\n        ) as Feature<Geometry>[];\r\n        const clonedFeatures = [];\r\n        const geoLayer = getStoredLayer(layerName);\r\n\r\n        for (const feature of features) {\r\n            let clone = this._cloneFeature(feature);\r\n            const cloneGeom = clone.getGeometry();\r\n\r\n            // Ugly fix to support GeometryCollection on GML\r\n            // See https://github.com/openlayers/openlayers/issues/4220\r\n            if (cloneGeom instanceof GeometryCollection) {\r\n                this._transformGeoemtryCollectionToGeometries(\r\n                    clone,\r\n                    cloneGeom as GeometryCollection\r\n                );\r\n            } else if (cloneGeom instanceof Circle) {\r\n                // Geoserver has no Support to Circles\r\n                this._transformCircleToPolygon(clone, cloneGeom as Circle);\r\n            }\r\n\r\n            // Filters\r\n            if (\r\n                'beforeTransactFeature' in geoLayer &&\r\n                typeof geoLayer.beforeTransactFeature === 'function'\r\n            ) {\r\n                clone = geoLayer.beforeTransactFeature(clone, transactionType);\r\n            }\r\n\r\n            if (clone) {\r\n                clonedFeatures.push(clone);\r\n            }\r\n        }\r\n\r\n        if (!clonedFeatures.length) {\r\n            showError(I18N.errors.noValidGeometry);\r\n            return false;\r\n        }\r\n\r\n        switch (transactionType) {\r\n            case TransactionType.Insert:\r\n                this._insertFeatures = [\r\n                    ...this._insertFeatures,\r\n                    ...clonedFeatures\r\n                ];\r\n                break;\r\n            case TransactionType.Update:\r\n                this._updateFeatures = [\r\n                    ...this._updateFeatures,\r\n                    ...clonedFeatures\r\n                ];\r\n                break;\r\n            case TransactionType.Delete:\r\n                this._deleteFeatures = [\r\n                    ...this._deleteFeatures,\r\n                    ...clonedFeatures\r\n                ];\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this._countRequests++;\r\n        const numberRequest = this._countRequests;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(async () => {\r\n                try {\r\n                    // Prevent fire multiples times\r\n                    if (numberRequest !== this._countRequests) {\r\n                        return;\r\n                    }\r\n\r\n                    let srs = getMap().getView().getProjection().getCode();\r\n\r\n                    // Force latitude/longitude order on transactions\r\n                    // EPSG:4326 is longitude/latitude (assumption) and is not managed correctly by GML3\r\n                    srs =\r\n                        srs === 'EPSG:4326'\r\n                            ? 'urn:x-ogc:def:crs:EPSG:4326'\r\n                            : srs;\r\n\r\n                    if (!geoLayer || !geoLayer.getDescribeFeatureType()) {\r\n                        throw new Error(\r\n                            `${I18N.errors.layerNotFound}: \"${layerName}\"`\r\n                        );\r\n                    }\r\n\r\n                    const describeFeatureType =\r\n                        geoLayer.getDescribeFeatureType()._parsed;\r\n\r\n                    const options = {\r\n                        featureNS: describeFeatureType.namespace,\r\n                        featureType: layerName,\r\n                        srsName: srs,\r\n                        featurePrefix: null,\r\n                        nativeElements: null,\r\n                        version: this.getAdvanced().wfsTransactionVersion\r\n                    };\r\n\r\n                    const transaction = this._formatWFS.writeTransaction(\r\n                        this._insertFeatures,\r\n                        this._updateFeatures,\r\n                        this._deleteFeatures,\r\n                        options\r\n                    );\r\n\r\n                    let payload = this._xs.serializeToString(transaction);\r\n                    const geomType = describeFeatureType.geomType;\r\n                    const geomField = describeFeatureType.geomField;\r\n\r\n                    // Ugly fix to support GeometryCollection on GML\r\n                    // See https://github.com/openlayers/openlayers/issues/4220\r\n                    if (geomType === GeometryType.GeometryCollection) {\r\n                        if (transactionType === TransactionType.Insert) {\r\n                            payload = payload.replace(\r\n                                /<geometry>/g,\r\n                                `<geometry><MultiGeometry xmlns=\"http://www.opengis.net/gml\" srsName=\"${srs}\"><geometryMember>`\r\n                            );\r\n                            payload = payload.replace(\r\n                                /<\\/geometry>/g,\r\n                                `</geometryMember></MultiGeometry></geometry>`\r\n                            );\r\n                        } else if (transactionType === TransactionType.Update) {\r\n                            const gmemberIn = `<MultiGeometry xmlns=\"http://www.opengis.net/gml\" srsName=\"${srs}\"><geometryMember>`;\r\n                            const gmemberOut = `</geometryMember></MultiGeometry>`;\r\n\r\n                            payload = payload.replace(\r\n                                /(.*)(<Name>geometry<\\/Name><Value>)(.*?)(<\\/Value>)(.*)/g,\r\n                                `$1$2${gmemberIn}$3${gmemberOut}$4$5`\r\n                            );\r\n                        }\r\n                    }\r\n\r\n                    // Fixes geometry name, weird bug with GML:\r\n                    // The property for the geometry column is always named \"geometry\"\r\n                    if (transactionType === TransactionType.Insert) {\r\n                        payload = payload.replace(\r\n                            /<(\\/?)\\bgeometry\\b>/g,\r\n                            `<$1${geomField}>`\r\n                        );\r\n                    } else {\r\n                        payload = payload.replace(\r\n                            /<Name>geometry<\\/Name>/g,\r\n                            `<Name>${geomField}</Name>`\r\n                        );\r\n                    }\r\n\r\n                    // This has to be te same used before\r\n                    if (\r\n                        this.hasLockFeature &&\r\n                        this.getUseLockFeature() &&\r\n                        transactionType !== TransactionType.Insert\r\n                    ) {\r\n                        payload = payload.replace(\r\n                            `</Transaction>`,\r\n                            `<LockId>${this._options.advanced.lockFeatureParams.lockId}</LockId></Transaction>`\r\n                        );\r\n                    }\r\n\r\n                    const headers = {\r\n                        'Content-Type': 'text/xml',\r\n                        ...this.getHeaders()\r\n                    };\r\n\r\n                    const response = await fetch(this.getUrl(), {\r\n                        method: 'POST',\r\n                        body: payload,\r\n                        headers: headers,\r\n                        credentials: this._options.credentials\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        throw new Error(\r\n                            I18N.errors.transaction + ' ' + response.status\r\n                        );\r\n                    }\r\n\r\n                    const responseStr = await response.text();\r\n\r\n                    const parseResponse =\r\n                        this._formatWFS.readTransactionResponse(responseStr);\r\n\r\n                    const wlayer = getStoredLayer(layerName);\r\n\r\n                    if (!Object.keys(parseResponse).length) {\r\n                        const findError = String(responseStr).match(\r\n                            /<ows:ExceptionText>([\\s\\S]*?)<\\/ows:ExceptionText>/\r\n                        );\r\n\r\n                        if (findError) {\r\n                            if (wlayer instanceof WmsLayer) {\r\n                                this._removeFeatures(\r\n                                    features as Feature<Geometry>[]\r\n                                );\r\n                            }\r\n                            // maybe remove tmp wms features here\r\n                            throw new Error(findError[1]);\r\n                        }\r\n                    }\r\n\r\n                    if (transactionType !== TransactionType.Delete) {\r\n                        this._removeFeatures(features as Feature<Geometry>[]);\r\n                    }\r\n\r\n                    wlayer.refresh();\r\n\r\n                    showLoading(false);\r\n\r\n                    this._insertFeatures = [];\r\n                    this._updateFeatures = [];\r\n                    this._deleteFeatures = [];\r\n\r\n                    this._countRequests = 0;\r\n\r\n                    resolve(parseResponse);\r\n                } catch (err) {\r\n                    showError(err.message, err);\r\n                    showLoading(false);\r\n                    this._countRequests = 0;\r\n                    reject();\r\n                }\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @privatwe\r\n     */\r\n    _removeFeatures(features: Feature<Geometry>[]) {\r\n        for (const feature of features as Array<Feature<Geometry>>) {\r\n            getEditLayer().getSource().removeFeature(feature);\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param feature\r\n     * @param geom\r\n     * @private\r\n     */\r\n    _transformCircleToPolygon(feature: Feature<Geometry>, geom: Circle) {\r\n        const geomConverted = fromCircle(geom);\r\n        feature.setGeometry(geomConverted);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param feature\r\n     * @private\r\n     * @param geom\r\n     */\r\n    _transformGeoemtryCollectionToGeometries(\r\n        feature: Feature<Geometry>,\r\n        geom: GeometryCollection\r\n    ) {\r\n        let geomConverted = geom.getGeometries()[0];\r\n\r\n        if (geomConverted instanceof Circle) {\r\n            geomConverted = fromCircle(geomConverted);\r\n        }\r\n\r\n        feature.setGeometry(geomConverted);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param feature\r\n     * @returns\r\n     * @private\r\n     */\r\n    _cloneFeature(feature: Feature<Geometry>): Feature<Geometry> {\r\n        removeFeatureFromEditList(feature);\r\n\r\n        const featureProperties = feature.getProperties();\r\n\r\n        delete featureProperties.boundedBy;\r\n        delete featureProperties._layerName_;\r\n\r\n        const clone = new Feature(featureProperties);\r\n        clone.setId(feature.getId());\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Lock a feature in the geoserver. Useful before editing a geometry,\r\n     * to avoid changes from multiples suers\r\n     *\r\n     * @param featureId\r\n     * @param layerName\r\n     * @param retry\r\n     * @public\r\n     */\r\n    async lockFeature(\r\n        featureId: string | number,\r\n        layerName: string,\r\n        retry = 0\r\n    ): Promise<string> {\r\n        const params = new URLSearchParams({\r\n            service: 'wfs',\r\n            version: this.getAdvanced().lockFeatureVersion,\r\n            request: 'LockFeature',\r\n            typeName: layerName,\r\n            expiry: String(this._options.advanced.lockFeatureParams.expiry),\r\n            LockId: this._options.advanced.lockFeatureParams.lockId,\r\n            releaseAction:\r\n                this._options.advanced.lockFeatureParams.releaseAction,\r\n            exceptions: 'application/json',\r\n            featureid: `${featureId}`\r\n        });\r\n\r\n        const url_fetch = this.getUrl() + '?' + params.toString();\r\n\r\n        try {\r\n            const response = await fetch(url_fetch, {\r\n                headers: this._options.headers,\r\n                credentials: this._options.credentials\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(I18N.errors.lockFeature);\r\n            }\r\n\r\n            const data = await response.text();\r\n\r\n            try {\r\n                // First, check if is a JSON (with errors)\r\n                const dataParsed = JSON.parse(data);\r\n\r\n                if ('exceptions' in dataParsed) {\r\n                    const error = new Error(parseError(dataParsed));\r\n\r\n                    const exceptions = dataParsed.exceptions;\r\n                    if (exceptions[0].code === 'CannotLockAllFeatures') {\r\n                        // Maybe the Feature is already blocked, ant thats trigger error, so, we try one locking more time again\r\n                        if (!retry) {\r\n                            this.lockFeature(featureId, layerName, 1);\r\n                        } else {\r\n                            throw error;\r\n                        }\r\n                    } else {\r\n                        throw error;\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                /*\r\n             \r\n                let dataDoc = (new window.DOMParser()).parseFromString(data, 'text/xml');\r\n             \r\n                let lockId = dataDoc.getElementsByTagName('wfs:LockId');\r\n             \r\n                let featuresLocked: HTMLCollectionOf<Element> = dataDoc.getElementsByTagName('ogc:FeatureId');\r\n             \r\n                for (let featureLocked of featuresLocked as any) {\r\n             \r\n                    console.log(featureLocked.getAttribute('fid'));\r\n             \r\n                }\r\n             \r\n                */\r\n            }\r\n\r\n            return data;\r\n        } catch (err) {\r\n            showError(err.message, err);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * **_[interface]_**\r\n * @public\r\n */\r\nexport interface GeoserverOptions {\r\n    /**\r\n     * Url for OWS services. This endpoint will recive the WFS, WFST and WMS requests\r\n     *\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Advanced options for geoserver requests\r\n     *\r\n     */\r\n    advanced?: GeoServerAdvanced;\r\n\r\n    /**\r\n     * Http headers for GeoServer requests\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Request/headers\r\n     *\r\n     */\r\n    headers?: HeadersInit;\r\n\r\n    /**\r\n     * Credentials for fetch requests\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials\r\n     *\r\n     * Default is 'same-origin'\r\n     */\r\n    credentials?: RequestCredentials;\r\n\r\n    /**\r\n     * Use LockFeatue request on GeoServer when selecting features. Prevents a feature from being edited\r\n     * through a persistent feature lock. This is not always supportedd by the GeoServer.\r\n     * See https://docs.geoserver.org/stable/en/user/services/wfs/reference.html\r\n     */\r\n    useLockFeature?: boolean;\r\n}\r\n\r\n/**\r\n * **_[interface]_**\r\n *\r\n *  * Default values:\r\n * ```javascript\r\n * {\r\n *   getCapabilitiesVersion: '1.3.0',\r\n *   getFeatureVersion: '1.0.0',\r\n *   describeFeatureTypeVersion: '1.1.0',\r\n *   lockFeatureVersion: '1.1.0',\r\n *   wfsTransactionVersion: '1.1.0',\r\n *   projection: 'EPSG:3857',\r\n *   lockFeatureParams: {\r\n *     expiry: 5,\r\n *     lockId: 'Geoserver',\r\n *     releaseAction: 'SOME'\r\n *   }\r\n * }\r\n * @public\r\n */\r\nexport interface GeoServerAdvanced {\r\n    getCapabilitiesVersion?: string;\r\n    getFeatureVersion?: string;\r\n    lockFeatureVersion?: string;\r\n    describeFeatureTypeVersion?: string;\r\n    wfsTransactionVersion?: string;\r\n    projection?: ProjectionLike;\r\n    lockFeatureParams?: {\r\n        // 5 (minutes) by default\r\n        expiry?: number | string;\r\n\r\n        // 'Geoserver' by default\r\n        lockId?: string;\r\n\r\n        // 'SOME' by default\r\n        releaseAction?: string;\r\n    };\r\n}\r\n\r\nexport enum GeoserverProperty {\r\n    CAPABILITIES = 'capabilities',\r\n    URL = 'url',\r\n    HEADERS = 'headers',\r\n    CREDENTIALS = 'credentials',\r\n    ADVANCED = 'advanced',\r\n    HASTRASNACTION = 'hasTransaction',\r\n    HASLOCKFEATURE = 'hasLockFeature',\r\n    HASDESCRIBEFEATURETYPE = 'hasDescribeFeatureType',\r\n    USELOCKFEATURE = 'useLockFeature',\r\n    ISLOADED = 'isLoaded'\r\n}\r\n\r\nexport type GeoserverEventTypes =\r\n    | `change:${GeoserverProperty.CAPABILITIES}`\r\n    | `change:${GeoserverProperty.URL}`\r\n    | `change:${GeoserverProperty.HEADERS}`\r\n    | `change:${GeoserverProperty.CREDENTIALS}`\r\n    | `change:${GeoserverProperty.ADVANCED}`\r\n    | `change:${GeoserverProperty.HASTRASNACTION}`\r\n    | `change:${GeoserverProperty.HASLOCKFEATURE}`\r\n    | `change:${GeoserverProperty.HASDESCRIBEFEATURETYPE}`\r\n    | `change:${GeoserverProperty.USELOCKFEATURE}`\r\n    | `change:${GeoserverProperty.ISLOADED}`;\r\n","var img = \"data:image/svg+xml,%3csvg version='1.1' xmlns='http://www.w3.org/2000/svg' width='448' height='448' viewBox='0 0 448 448'%3e %3cpath d='M222 296l29-29-38-38-29 29v14h24v24h14zM332 116c-2.25-2.25-6-2-8.25 0.25l-87.5 87.5c-2.25 2.25-2.5 6-0.25 8.25s6 2 8.25-0.25l87.5-87.5c2.25-2.25 2.5-6 0.25-8.25zM352 264.5v47.5c0 39.75-32.25 72-72 72h-208c-39.75 0-72-32.25-72-72v-208c0-39.75 32.25-72 72-72h208c10 0 20 2 29.25 6.25 2.25 1 4 3.25 4.5 5.75 0.5 2.75-0.25 5.25-2.25 7.25l-12.25 12.25c-2.25 2.25-5.25 3-8 2-3.75-1-7.5-1.5-11.25-1.5h-208c-22 0-40 18-40 40v208c0 22 18 40 40 40h208c22 0 40-18 40-40v-31.5c0-2 0.75-4 2.25-5.5l16-16c2.5-2.5 5.75-3 8.75-1.75s5 4 5 7.25zM328 80l72 72-168 168h-72v-72zM439 113l-23 23-72-72 23-23c9.25-9.25 24.75-9.25 34 0l38 38c9.25 9.25 9.25 24.75 0 34z'%3e%3c/path%3e%3c/svg%3e\";\n  export default img;","var img = \"data:image/svg+xml,%3csvg version='1.1' xmlns='http://www.w3.org/2000/svg' width='541' height='512' viewBox='0 0 541 512'%3e %3cpath fill='black' d='M103.306 228.483l129.493-125.249c-17.662-4.272-31.226-18.148-34.98-35.663l-0.055-0.307-129.852 125.248c17.812 4.15 31.53 18.061 35.339 35.662l0.056 0.308z'%3e%3c/path%3e %3cpath fill='black' d='M459.052 393.010c-13.486-8.329-22.346-23.018-22.373-39.779v-0.004c-0.053-0.817-0.082-1.772-0.082-2.733s0.030-1.916 0.089-2.863l-0.007 0.13-149.852 71.94c9.598 8.565 15.611 20.969 15.611 34.779 0 0.014 0 0.029 0 0.043v-0.002c-0.048 5.164-0.94 10.104-2.544 14.711l0.098-0.322z'%3e%3c/path%3e %3cpath fill='black' d='M290.207 57.553c-0.009 15.55-7.606 29.324-19.289 37.819l-0.135 0.093 118.054 46.69c-0.216-1.608-0.346-3.48-0.36-5.379v-0.017c0.033-16.948 9.077-31.778 22.596-39.953l0.209-0.118-122.298-48.056c0.659 2.633 1.098 5.693 1.221 8.834l0.002 0.087z'%3e%3c/path%3e %3cpath fill='black' d='M241.36 410.132l-138.629-160.067c-4.734 17.421-18.861 30.61-36.472 33.911l-0.29 0.045 143.881 166.255c1.668-18.735 14.197-34.162 31.183-40.044l0.327-0.099z'%3e%3c/path%3e %3cpath fill='black' d='M243.446 115.105c-31.785 0-57.553-25.767-57.553-57.553s25.767-57.553 57.553-57.553c31.785 0 57.552 25.767 57.552 57.553v0c0 31.786-25.767 57.553-57.553 57.553v0zM243.446 21.582c-19.866 0-35.97 16.105-35.97 35.97s16.105 35.97 35.97 35.97c19.866 0 35.97-16.105 35.97-35.97v0c0-19.866-16.104-35.97-35.97-35.97v0z'%3e%3c/path%3e %3cpath fill='black' d='M483.224 410.78c-31.786 0-57.553-25.767-57.553-57.553s25.767-57.553 57.553-57.553c31.786 0 57.552 25.767 57.552 57.553v0c0 31.786-25.767 57.553-57.553 57.553v0zM483.224 317.257c-19.866 0-35.97 16.104-35.97 35.97s16.105 35.97 35.97 35.97c19.866 0 35.97-16.105 35.97-35.97v0c0-19.866-16.105-35.97-35.97-35.97v0z'%3e%3c/path%3e %3cpath fill='black' d='M57.553 295.531c-31.785 0-57.553-25.767-57.553-57.553s25.767-57.553 57.553-57.553c31.785 0 57.553 25.767 57.553 57.553v0c0 31.786-25.767 57.553-57.553 57.553v0zM57.553 202.008c-19.866 0-35.97 16.105-35.97 35.97s16.105 35.97 35.97 35.97c19.866 0 35.97-16.105 35.97-35.97v0c-0.041-19.835-16.13-35.898-35.97-35.898 0 0 0 0 0 0v0z'%3e%3c/path%3e %3cpath fill='black' d='M256.036 512.072c-31.786 0-57.553-25.767-57.553-57.553s25.767-57.553 57.553-57.553c31.786 0 57.553 25.767 57.553 57.553v0c0 31.786-25.767 57.553-57.553 57.553v0zM256.036 418.55c-19.866 0-35.97 16.104-35.97 35.97s16.105 35.97 35.97 35.97c19.866 0 35.97-16.105 35.97-35.97v0c0-19.866-16.105-35.97-35.97-35.97v0z'%3e%3c/path%3e %3cpath fill='black' d='M435.24 194.239c-31.786 0-57.553-25.767-57.553-57.553s25.767-57.553 57.553-57.553c31.786 0 57.553 25.767 57.553 57.553v0c0 31.785-25.767 57.553-57.553 57.553v0zM435.24 100.716c-19.866 0-35.97 16.105-35.97 35.97s16.105 35.97 35.97 35.97c19.866 0 35.97-16.105 35.97-35.97v0c0-19.866-16.105-35.97-35.97-35.97v0z'%3e%3c/path%3e%3c/svg%3e\";\n  export default img;","import { getCenter } from 'ol/extent.js';\r\nimport Geometry from 'ol/geom/Geometry.js';\r\nimport Feature from 'ol/Feature.js';\r\nimport Overlay from 'ol/Overlay.js';\r\nimport { Coordinate } from 'ol/coordinate.js';\r\n\r\n// Images\r\nimport editFieldsSvg from '../assets/images/editFields.svg';\r\nimport editGeomSvg from '../assets/images/editGeom.svg';\r\nimport { I18N } from './i18n';\r\n\r\nimport myPragma from '../myPragma';\r\n\r\nexport default class EditOverlay extends Overlay {\r\n    constructor(feature: Feature<Geometry>, coordinate: Coordinate = null) {\r\n        super({\r\n            id: feature.getId(),\r\n            position:\r\n                coordinate || getCenter(feature.getGeometry().getExtent()),\r\n            positioning: 'center-center',\r\n            offset: [0, -40],\r\n            stopEvent: true,\r\n            element: (\r\n                <div>\r\n                    <div\r\n                        className=\"ol-wfst--edit-button-cnt\"\r\n                        onClick={() => {\r\n                            this.dispatchEvent('editFields');\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"ol-wfst--edit-button\"\r\n                            type=\"button\"\r\n                            title={I18N.labels.editFields}\r\n                        >\r\n                            <img\r\n                                src={editFieldsSvg as string}\r\n                                alt={I18N.labels.editFields}\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                    <div\r\n                        className=\"ol-wfst--edit-button-cnt\"\r\n                        onClick={() => {\r\n                            this.dispatchEvent('editGeom');\r\n                        }}\r\n                    >\r\n                        <button\r\n                            class=\"ol-wfst--edit-button\"\r\n                            type=\"button\"\r\n                            title={I18N.labels.editGeom}\r\n                        >\r\n                            <img\r\n                                src={editGeomSvg as string}\r\n                                alt={I18N.labels.editGeom}\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        });\r\n    }\r\n}\r\n","// Ol\r\nimport Geometry from 'ol/geom/Geometry.js';\r\nimport CircleStyle from 'ol/style/Circle.js';\r\nimport Fill from 'ol/style/Fill.js';\r\nimport Stroke from 'ol/style/Stroke.js';\r\nimport Style from 'ol/style/Style.js';\r\nimport Control from 'ol/control/Control.js';\r\nimport Draw from 'ol/interaction/Draw.js';\r\nimport Modify from 'ol/interaction/Modify.js';\r\nimport Select from 'ol/interaction/Select.js';\r\nimport Snap from 'ol/interaction/Snap.js';\r\nimport MapBrowserEvent from 'ol/MapBrowserEvent.js';\r\nimport { EventsKey } from 'ol/events.js';\r\nimport Collection from 'ol/Collection.js';\r\nimport Feature from 'ol/Feature.js';\r\nimport Overlay from 'ol/Overlay.js';\r\nimport View from 'ol/View.js';\r\nimport VectorSource from 'ol/source/Vector.js';\r\nimport Map from 'ol/Map.js';\r\nimport BaseEvent from 'ol/events/Event.js';\r\nimport { LoadingStrategy } from 'ol/source/Vector.js';\r\nimport { FeatureLike } from 'ol/Feature.js';\r\nimport { Options as VectorLayerOptions } from 'ol/layer/BaseVector.js';\r\nimport { never, primaryAction } from 'ol/events/condition.js';\r\nimport {\r\n    unByKey,\r\n    CombinedOnSignature,\r\n    EventTypes,\r\n    OnSignature\r\n} from 'ol/Observable.js';\r\nimport { Coordinate } from 'ol/coordinate.js';\r\nimport { ObjectEvent } from 'ol/Object.js';\r\nimport { Types as ObjectEventTypes } from 'ol/ObjectEventType.js';\r\n\r\nimport { initModal, showError } from './modules/errors';\r\nimport { initLoading, showLoading } from './modules/loading';\r\nimport WfsLayer from './WfsLayer';\r\nimport WmsLayer from './WmsLayer';\r\nimport LayersControl, {\r\n    activateDrawButton,\r\n    activateModeButtons,\r\n    resetStateButtons\r\n} from './modules/LayersControl';\r\nimport Uploads from './modules/Uploads';\r\nimport {\r\n    addFeatureToEditedList,\r\n    getStoredMapLayers,\r\n    isFeatureEdited,\r\n    removeFeatureFromEditList,\r\n    setActiveLayerToInsertEls,\r\n    getActiveLayerToInsertEls,\r\n    activateMode,\r\n    getMode,\r\n    Modes,\r\n    setMap,\r\n    setMapLayers,\r\n    getStoredLayer\r\n} from './modules/state';\r\nimport { deepObjectAssign } from './modules/helpers';\r\nimport { getEditLayer } from './modules/editLayer';\r\nimport { GeometryType, TransactionType } from './@enums';\r\nimport {\r\n    I18n,\r\n    IGeoserverDescribeFeatureType,\r\n    WfsGeoserverVendor,\r\n    WmsGeoserverVendor\r\n} from './@types';\r\nimport * as i18n from './modules/i18n/index';\r\nimport { getDefaultOptions } from './defaults';\r\nimport EditControlChangesEl from './modules/EditControlChanges';\r\nimport styleFunction from './modules/styleFunction';\r\nimport { EditFieldsModal } from './modules/EditFieldsModal';\r\nimport Geoserver from './Geoserver';\r\nimport EditOverlay from './modules/EditOverlay';\r\nimport { BaseLayerProperty } from './modules/base/BaseLayer';\r\n\r\n// External\r\nimport Modal from 'modal-vanilla';\r\n\r\n// Style\r\nimport './assets/scss/-ol-wfst.bootstrap5.scss';\r\nimport './assets/scss/ol-wfst.scss';\r\n\r\nconst controlElement = document.createElement('div');\r\n\r\n/**\r\n * Tiny WFST-T client to insert (drawing/uploading), modify and delete\r\n * features on GeoServers using OpenLayers. Layers with these types\r\n * of geometries are supported: \"GeometryCollection\" (in this case, you can\r\n * choose the geometry type of each element to draw), \"Point\", \"MultiPoint\",\r\n * \"LineString\", \"MultiLineString\", \"Polygon\" and \"MultiPolygon\".\r\n *\r\n * @constructor\r\n * @fires modifystart\r\n * @fires modifyend\r\n * @fires drawstart\r\n * @fires drawend\r\n * @fires load\r\n * @fires describeFeatureType\r\n * @extends {ol/control/Control~Control}\r\n * @param options Wfst options, see [Wfst Options](#options) for more details.\r\n */\r\nexport default class Wfst extends Control {\r\n    protected _options: Options;\r\n    protected _i18n: I18n;\r\n\r\n    // Ol\r\n    protected _map: Map;\r\n    protected _view: View;\r\n    protected _viewport: HTMLElement;\r\n    protected _initialized = false;\r\n    protected _layersControl: LayersControl;\r\n    protected _overlay: Overlay;\r\n\r\n    // Interactions\r\n    protected _interactionWfsSelect: Select;\r\n    protected _interactionSelectModify: Select;\r\n    protected _collectionModify: Collection<any>;\r\n    protected _interactionModify: Modify;\r\n    protected _interactionSnap: Snap;\r\n    protected _interactionDraw: Draw;\r\n\r\n    // Obserbable keys\r\n    protected _keyClickWms: EventsKey | EventsKey[];\r\n    protected _keyRemove: EventsKey;\r\n    protected _keySelect: EventsKey;\r\n\r\n    // Controls\r\n    protected _controlApplyDiscardChanges: EditControlChangesEl;\r\n    protected _controlWidgetToolsDiv: HTMLElement;\r\n    protected _selectDraw: HTMLSelectElement;\r\n\r\n    // State\r\n    protected _currentZoom: number;\r\n    protected _lastZoom: number;\r\n\r\n    // Editing\r\n    protected _editFeature: Feature<Geometry>;\r\n    protected _editFeatureOriginal: Feature<Geometry>;\r\n\r\n    protected _uploads: Uploads;\r\n    protected _editFields: EditFieldsModal;\r\n\r\n    declare on: OnSignature<EventTypes, BaseEvent, EventsKey> &\r\n        OnSignature<WfstEventTypes, WfstEvent, EventsKey> &\r\n        OnSignature<ObjectEventTypes, ObjectEvent, EventsKey> &\r\n        CombinedOnSignature<\r\n            WfstEventTypes | ObjectEventTypes | EventTypes,\r\n            EventsKey\r\n        >;\r\n\r\n    declare once: OnSignature<EventTypes, BaseEvent, EventsKey> &\r\n        OnSignature<WfstEventTypes, WfstEvent, EventsKey> &\r\n        OnSignature<ObjectEventTypes, ObjectEvent, EventsKey> &\r\n        CombinedOnSignature<\r\n            WfstEventTypes | ObjectEventTypes | EventTypes,\r\n            EventsKey\r\n        >;\r\n\r\n    declare un: OnSignature<EventTypes, BaseEvent, void> &\r\n        OnSignature<WfstEventTypes, WfstEvent, EventsKey> &\r\n        OnSignature<ObjectEventTypes, ObjectEvent, void> &\r\n        CombinedOnSignature<\r\n            WfstEventTypes | ObjectEventTypes | EventTypes,\r\n            void\r\n        >;\r\n\r\n    constructor(options?: Options) {\r\n        super({\r\n            target: null,\r\n            element: controlElement,\r\n            render: () => {\r\n                if (!this._map) this._init();\r\n            }\r\n        });\r\n\r\n        i18n.setLang(options.language, options.i18n);\r\n\r\n        const defaultOptions = getDefaultOptions();\r\n\r\n        this._options = deepObjectAssign(defaultOptions, options);\r\n\r\n        // By default, the first layer is ready to accept new draws\r\n        setActiveLayerToInsertEls(this._options.layers[0]);\r\n\r\n        this._controlWidgetToolsDiv = controlElement;\r\n        this._controlWidgetToolsDiv.className = 'ol-wfst--tools-control';\r\n\r\n        this._uploads = new Uploads(this._options);\r\n\r\n        this._editFields = new EditFieldsModal(this._options.modal);\r\n    }\r\n\r\n    /**\r\n     * Get all the layers in the ol-wfst instance\r\n     * @public\r\n     */\r\n    getLayers(): Array<WfsLayer | WmsLayer> {\r\n        return Object.values(getStoredMapLayers());\r\n    }\r\n\r\n    /**\r\n     * Get a layer\r\n     * @public\r\n     */\r\n    getLayerByName(layerName = ''): WfsLayer | WmsLayer {\r\n        const layers = getStoredMapLayers();\r\n        if (layerName && layerName in layers) {\r\n            return layers[layerName];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Connect to the GeoServer and retrieve metadata about the service (GetCapabilities).\r\n     * Get each layer specs (DescribeFeatureType) and create the layers and map controls.\r\n     * @fires describeFeatureType\r\n     * @private\r\n     */\r\n    async _initMapAndLayers(): Promise<void> {\r\n        try {\r\n            const layers = this._options.layers;\r\n\r\n            if (layers.length) {\r\n                let layerRendered = 0;\r\n                let layersNumber = 0; // Only count visibles\r\n\r\n                layers.forEach((layer) => {\r\n                    if (layer.getVisible()) layersNumber++;\r\n\r\n                    layer.on('layerRendered', () => {\r\n                        layerRendered++;\r\n                        if (layerRendered >= layersNumber) {\r\n                            // run only once\r\n                            if (!this._initialized) {\r\n                                this.dispatchEvent('load');\r\n                                this._initialized = true;\r\n                            }\r\n                            showLoading(false);\r\n                        }\r\n                    });\r\n\r\n                    layer.on('change:describeFeatureType', () => {\r\n                        const domEl = this._layersControl.addLayerEl(layer);\r\n\r\n                        layer.on('change:isVisible', () => {\r\n                            const layerNotVisible =\r\n                                'ol-wfst--layer-not-visible';\r\n\r\n                            const visible = layer.isVisibleByZoom();\r\n                            if (visible)\r\n                                domEl.classList.remove(layerNotVisible);\r\n                            else domEl.classList.add(layerNotVisible);\r\n                        });\r\n\r\n                        layer.set(\r\n                            BaseLayerProperty.ISVISIBLE,\r\n                            this._currentZoom > layer.getMinZoom()\r\n                        );\r\n\r\n                        this.dispatchEvent(\r\n                            new WfstEvent({\r\n                                type: 'describeFeatureType',\r\n                                layer: layer,\r\n                                data: layer.getDescribeFeatureType()\r\n                            })\r\n                        );\r\n                    });\r\n\r\n                    layer._init();\r\n\r\n                    this._map.addLayer(layer);\r\n\r\n                    setMapLayers({\r\n                        [layer.get(BaseLayerProperty.NAME)]: layer\r\n                    });\r\n                });\r\n\r\n                this._createMapElements(\r\n                    this._options.showControl,\r\n                    this._options.active\r\n                );\r\n            }\r\n        } catch (err) {\r\n            showLoading(false);\r\n            showError(err.message, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _init(): void {\r\n        this._map = super.getMap();\r\n        this._view = this._map.getView();\r\n        this._viewport = this._map.getViewport();\r\n\r\n        setMap(this._map);\r\n\r\n        //@ts-expect-error\r\n        this._uploads.on('addedFeatures', ({ features }) => {\r\n            const layer = getActiveLayerToInsertEls();\r\n            layer.insertFeatures(features);\r\n        });\r\n\r\n        //@ts-expect-error\r\n        this._uploads.on('loadedFeatures', ({ features }) => {\r\n            this.activateEditMode();\r\n            const editLayerSource = getEditLayer().getSource();\r\n\r\n            editLayerSource.addFeatures(features);\r\n\r\n            this._view.fit(editLayerSource.getExtent(), {\r\n                size: this._map.getSize(),\r\n                maxZoom: 21,\r\n                padding: [100, 100, 100, 100]\r\n            });\r\n        });\r\n\r\n        // @ts-expect-error\r\n        this._editFields.on('save', ({ feature }) => {\r\n            // Force deselect to trigger handler\r\n            this._collectionModify.remove(feature);\r\n        });\r\n\r\n        // @ts-expect-error\r\n        this._editFields.dispose('delete', ({ feature }) => {\r\n            this._deleteFeature(feature, true);\r\n        });\r\n\r\n        this._addMapEvents();\r\n\r\n        initModal(this._options['modal']);\r\n\r\n        this._controlWidgetToolsDiv.append(initLoading());\r\n\r\n        this._initMapAndLayers();\r\n    }\r\n\r\n    /**\r\n     * Create the edit layer to allow modify elements, add interactions,\r\n     * map controls and keyboard handlers.\r\n     *\r\n     * @param showControl\r\n     * @param active\r\n     * @private\r\n     */\r\n    async _createMapElements(\r\n        showControl: boolean,\r\n        active: boolean\r\n    ): Promise<void> {\r\n        // VectorLayer to store features on editing and inserting\r\n        this._prepareEditLayer();\r\n\r\n        this._addInteractions();\r\n        this._addInteractionHandlers();\r\n\r\n        if (showControl) {\r\n            this._addMapControl();\r\n        }\r\n\r\n        // By default, init in edit mode\r\n        this.activateEditMode(active);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _addInteractions(): void {\r\n        /**\r\n         * Select the wfs feature already downloaded\r\n         * @private\r\n         */\r\n        const prepareWfsInteraction = () => {\r\n            this._collectionModify = new Collection();\r\n\r\n            // Interaction to select wfs layer elements\r\n            this._interactionWfsSelect = new Select({\r\n                hitTolerance: 10,\r\n                style: (feature: Feature<Geometry>) => styleFunction(feature),\r\n                toggleCondition: never, // Prevent add features to the current selection using shift\r\n                filter: (feature, layer) => {\r\n                    return (\r\n                        getMode() !== Modes.Edit &&\r\n                        layer &&\r\n                        layer instanceof WfsLayer &&\r\n                        layer === getActiveLayerToInsertEls()\r\n                    );\r\n                }\r\n            });\r\n\r\n            this._map.addInteraction(this._interactionWfsSelect);\r\n\r\n            this._interactionWfsSelect.on(\r\n                'select',\r\n                ({ selected, deselected, mapBrowserEvent }) => {\r\n                    const coordinate = mapBrowserEvent.coordinate;\r\n\r\n                    if (selected.length) {\r\n                        selected.forEach((feature) => {\r\n                            if (!isFeatureEdited(feature)) {\r\n                                // Remove the feature from the original layer\r\n                                const layer =\r\n                                    this._interactionWfsSelect.getLayer(\r\n                                        feature\r\n                                    );\r\n                                layer.getSource().removeFeature(feature);\r\n                                this._addFeatureToEditMode(\r\n                                    feature,\r\n                                    coordinate,\r\n                                    layer.get(BaseLayerProperty.NAME)\r\n                                );\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    if (deselected.length) {\r\n                        if (getMode() !== Modes.Edit) {\r\n                            deselected.forEach((feature) => {\r\n                                // Trigger deselect\r\n                                // This is necessary for those times where two features overlap.\r\n                                this._collectionModify.remove(feature);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n        };\r\n\r\n        /**\r\n         * Call the geoserver to get the clicked feature\r\n         * @private\r\n         */\r\n        const prepareWmsInteraction = (): void => {\r\n            // Interaction to allow select features in the edit layer\r\n            this._interactionSelectModify = new Select({\r\n                style: (feature: Feature<Geometry>) => styleFunction(feature),\r\n                layers: [getEditLayer()],\r\n                toggleCondition: never, // Prevent add features to the current selection using shift\r\n                removeCondition: () => (getMode() === Modes.Edit ? true : false) // Prevent deselect on clicking outside the feature\r\n            });\r\n\r\n            this._map.addInteraction(this._interactionSelectModify);\r\n\r\n            this._collectionModify =\r\n                this._interactionSelectModify.getFeatures();\r\n\r\n            this._keyClickWms = this._map.on(\r\n                this._options.evtType,\r\n                async (evt: MapBrowserEvent<MouseEvent>) => {\r\n                    if (this._map.hasFeatureAtPixel(evt.pixel)) {\r\n                        return;\r\n                    }\r\n\r\n                    // Only get other features if editmode is disabled\r\n                    if (getMode() !== Modes.Edit) {\r\n                        const layer = getActiveLayerToInsertEls();\r\n\r\n                        // If layer is hidden or is a wfs, skip\r\n                        if (\r\n                            !layer.getVisible() ||\r\n                            !layer.isVisibleByZoom() ||\r\n                            layer instanceof WfsLayer\r\n                        ) {\r\n                            return;\r\n                        }\r\n\r\n                        const features = await layer._getFeaturesByClickEvent(\r\n                            evt\r\n                        );\r\n\r\n                        if (!features.length) {\r\n                            return;\r\n                        }\r\n\r\n                        // For now, support is only for one feature at time\r\n                        this._addFeatureToEditMode(\r\n                            features[0],\r\n                            evt.coordinate,\r\n                            layer.get(BaseLayerProperty.NAME)\r\n                        );\r\n                    }\r\n                }\r\n            );\r\n        };\r\n\r\n        if (this._options.layers.find((layer) => layer instanceof WfsLayer)) {\r\n            prepareWfsInteraction();\r\n        }\r\n\r\n        if (this._options.layers.find((layer) => layer instanceof WmsLayer)) {\r\n            prepareWmsInteraction();\r\n        }\r\n\r\n        this._interactionModify = new Modify({\r\n            style: () => {\r\n                if (getMode() === Modes.Edit) {\r\n                    return new Style({\r\n                        image: new CircleStyle({\r\n                            radius: 6,\r\n                            fill: new Fill({\r\n                                color: '#ff0000'\r\n                            }),\r\n                            stroke: new Stroke({\r\n                                width: 2,\r\n                                color: 'rgba(5, 5, 5, 0.9)'\r\n                            })\r\n                        })\r\n                    });\r\n                } else {\r\n                    return;\r\n                }\r\n            },\r\n            features: this._collectionModify,\r\n            condition: (evt) => {\r\n                return primaryAction(evt) && getMode() === Modes.Edit;\r\n            }\r\n        });\r\n\r\n        this._map.addInteraction(this._interactionModify);\r\n\r\n        this._interactionSnap = new Snap({\r\n            source: getEditLayer().getSource()\r\n        });\r\n        this._map.addInteraction(this._interactionSnap);\r\n    }\r\n\r\n    /**\r\n     * Layer to store temporary the elements to be edited\r\n     * @private\r\n     */\r\n    _prepareEditLayer(): void {\r\n        this._map.addLayer(getEditLayer());\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _addMapEvents(): void {\r\n        /**\r\n         * @private\r\n         */\r\n        const keyboardEvents = (): void => {\r\n            document.addEventListener('keydown', ({ key }) => {\r\n                const inputFocus = document.querySelector('input:focus');\r\n                if (inputFocus) {\r\n                    return;\r\n                }\r\n                if (key === 'Delete') {\r\n                    const selectedFeatures = this._collectionModify;\r\n                    if (selectedFeatures) {\r\n                        selectedFeatures.forEach((feature) => {\r\n                            this._deleteFeature(feature, true);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        keyboardEvents();\r\n\r\n        this._map.on('moveend', (): void => {\r\n            this._currentZoom = this._view.getZoom();\r\n\r\n            if (this._currentZoom !== this._lastZoom) {\r\n                const layers = getStoredMapLayers();\r\n\r\n                Object.keys(layers).forEach((key) => {\r\n                    const layer = layers[key];\r\n                    if (this._currentZoom > layer.getMinZoom()) {\r\n                        // Show the layers\r\n                        if (!layer.get(BaseLayerProperty.ISVISIBLE)) {\r\n                            layer.set(BaseLayerProperty.ISVISIBLE, true);\r\n                        }\r\n                    } else {\r\n                        // Hide the layer\r\n                        if (layer.get(BaseLayerProperty.ISVISIBLE)) {\r\n                            layer.set(BaseLayerProperty.ISVISIBLE, false);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                this._lastZoom = this._currentZoom;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add map handlers\r\n     * @private\r\n     */\r\n    _addInteractionHandlers(): void {\r\n        // When a feature is modified, add this to a list.\r\n        // This prevent events fired on select and deselect features that has no changes and should\r\n        // not be updated in the geoserver\r\n        this._interactionModify.on('modifyend', (evt) => {\r\n            const feature = evt.features.item(0);\r\n            addFeatureToEditedList(feature);\r\n            super.dispatchEvent(evt);\r\n        });\r\n\r\n        this._interactionModify.on('modifystart', (evt) => {\r\n            super.dispatchEvent(evt);\r\n        });\r\n\r\n        this._onDeselectFeatureEvent();\r\n        this._onRemoveFeatureEvent();\r\n    }\r\n\r\n    /**\r\n     * Add the widget on the map to allow change the tools and select active layers\r\n     * @private\r\n     */\r\n    _addMapControl(): void {\r\n        this._layersControl = new LayersControl(\r\n            this._options.showUpload ? this._uploads : null,\r\n            this._options.uploadFormats\r\n        );\r\n\r\n        // @ts-expect-error\r\n        this._layersControl.on('drawMode', () => {\r\n            if (getMode() === Modes.Draw) {\r\n                resetStateButtons();\r\n                this.activateEditMode();\r\n            } else {\r\n                const activeLayer = getActiveLayerToInsertEls();\r\n\r\n                if (!activeLayer.isVisibleByZoom()) {\r\n                    showError(i18n.I18N.errors.layerNotVisible);\r\n                } else {\r\n                    this.activateDrawMode(getActiveLayerToInsertEls());\r\n                }\r\n            }\r\n        });\r\n\r\n        // @ts-expect-error\r\n        this._layersControl.on('changeGeom', () => {\r\n            if (getMode() === Modes.Draw) {\r\n                this.activateDrawMode(getActiveLayerToInsertEls());\r\n            }\r\n        });\r\n\r\n        const controlEl = this._layersControl.render();\r\n\r\n        this._selectDraw = controlEl.querySelector(\r\n            '.wfst--tools-control--select-draw'\r\n        );\r\n\r\n        this._controlWidgetToolsDiv.append(controlEl);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param feature\r\n     * @private\r\n     */\r\n    _deselectEditFeature(feature: FeatureLike): void {\r\n        this._removeOverlayHelper(feature);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param feature\r\n     * @param layerName\r\n     * @private\r\n     */\r\n    _restoreFeatureToLayer(\r\n        feature: Feature<Geometry>,\r\n        layerName?: string\r\n    ): void {\r\n        layerName = layerName || feature.get('_layerName_');\r\n        const layer = getStoredMapLayers()[layerName];\r\n        (layer.getSource() as VectorSource<Geometry>).addFeature(feature);\r\n    }\r\n\r\n    /**\r\n     * @param feature\r\n     * @private\r\n     */\r\n    _removeFeatureFromTmpLayer(feature: Feature<Geometry>): void {\r\n        // Remove element from the Layer\r\n        getEditLayer().getSource().removeFeature(feature);\r\n    }\r\n\r\n    /**\r\n     * Trigger on deselecting a feature from in the Edit layer\r\n     *\r\n     * @private\r\n     */\r\n    _onDeselectFeatureEvent(): void {\r\n        const checkIfFeatureIsChanged = (feature: Feature<Geometry>): void => {\r\n            const layerName = feature.get('_layerName_');\r\n\r\n            const layer = this._options.layers.find(\r\n                (layer) => layer.get(BaseLayerProperty.NAME) === layerName\r\n            );\r\n\r\n            if (layer instanceof WfsLayer) {\r\n                this._interactionWfsSelect.getFeatures().remove(feature);\r\n            }\r\n\r\n            if (isFeatureEdited(feature)) {\r\n                layer.transactFeatures(TransactionType.Update, feature);\r\n            } else {\r\n                // Si es wfs y el elemento no tuvo cambios, lo devolvemos a la layer original\r\n                if (layer instanceof WfsLayer) {\r\n                    this._restoreFeatureToLayer(feature, layerName);\r\n                }\r\n                this._removeFeatureFromTmpLayer(feature);\r\n            }\r\n        };\r\n\r\n        // This is fired when a feature is deselected and fires the transaction process\r\n        this._keySelect = this._collectionModify.on('remove', (evt) => {\r\n            const feature = evt.element;\r\n\r\n            this._deselectEditFeature(feature);\r\n\r\n            checkIfFeatureIsChanged(feature);\r\n\r\n            this._editModeOff();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Trigger on removing a feature from the Edit layer\r\n     *\r\n     * @private\r\n     */\r\n    _onRemoveFeatureEvent(): void {\r\n        // If a feature is removed from the edit layer\r\n        this._keyRemove = getEditLayer()\r\n            .getSource()\r\n            .on('removefeature', (evt) => {\r\n                const feature = evt.feature;\r\n\r\n                if (!feature.get('_delete_')) {\r\n                    return;\r\n                }\r\n\r\n                if (this._keySelect) {\r\n                    unByKey(this._keySelect);\r\n                }\r\n\r\n                const layerName = feature.get('_layerName_');\r\n\r\n                const ll = this.getLayerByName(layerName);\r\n\r\n                ll.transactFeatures(TransactionType.Delete, feature);\r\n\r\n                this._deselectEditFeature(feature);\r\n                this._editModeOff();\r\n\r\n                if (this._keySelect) {\r\n                    setTimeout(() => {\r\n                        this._onDeselectFeatureEvent();\r\n                    }, 150);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param feature\r\n     * @private\r\n     */\r\n    _editModeOn(feature: Feature<Geometry>): void {\r\n        this._editFeatureOriginal = feature.clone();\r\n\r\n        activateMode(Modes.Edit);\r\n\r\n        // To refresh the style\r\n        getEditLayer().getSource().changed();\r\n\r\n        this._removeOverlayHelper(feature);\r\n\r\n        this._controlApplyDiscardChanges = new EditControlChangesEl(feature);\r\n\r\n        this._controlApplyDiscardChanges.on('cancel', ({ feature }) => {\r\n            feature.setGeometry(this._editFeatureOriginal.getGeometry());\r\n            removeFeatureFromEditList(feature);\r\n            this._collectionModify.remove(feature);\r\n        });\r\n\r\n        this._controlApplyDiscardChanges.on('apply', ({ feature }) => {\r\n            showLoading();\r\n            this._collectionModify.remove(feature);\r\n        });\r\n\r\n        this._controlApplyDiscardChanges.on('delete', ({ feature }) => {\r\n            this._deleteFeature(feature, true);\r\n        });\r\n\r\n        this._map.addControl(this._controlApplyDiscardChanges);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _editModeOff(): void {\r\n        activateMode(null);\r\n        this._map.removeControl(this._controlApplyDiscardChanges);\r\n    }\r\n\r\n    /**\r\n     * Remove a feature from the edit Layer and from the Geoserver\r\n     *\r\n     * @param feature\r\n     * @private\r\n     */\r\n    _deleteFeature(feature: Feature<Geometry>, confirm: boolean): void {\r\n        const deleteEl = () => {\r\n            const features = Array.isArray(feature) ? feature : [feature];\r\n            features.forEach((feature) => {\r\n                feature.set('_delete_', true, true);\r\n                getEditLayer().getSource().removeFeature(feature);\r\n            });\r\n            this._collectionModify.clear();\r\n\r\n            const layerName = feature.get('_layerName_');\r\n            const layer = this._options.layers.find(\r\n                (layer) => layer.get(BaseLayerProperty.NAME) === layerName\r\n            );\r\n\r\n            if (layer instanceof WfsLayer) {\r\n                this._interactionWfsSelect.getFeatures().remove(feature);\r\n            }\r\n        };\r\n\r\n        if (confirm) {\r\n            const confirmModal = Modal.confirm(i18n.I18N.labels.confirmDelete, {\r\n                ...this._options.modal\r\n            });\r\n\r\n            confirmModal.show().once('dismiss', function (modal, ev, button) {\r\n                if (button && button.value) {\r\n                    deleteEl();\r\n                }\r\n            });\r\n        } else {\r\n            deleteEl();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a feature to the Edit Layer to allow editing, and creates an Overlay Helper to show options\r\n     *\r\n     * @param feature\r\n     * @param coordinate\r\n     * @param layerName\r\n     * @private\r\n     */\r\n    _addFeatureToEditMode(\r\n        feature: Feature<Geometry>,\r\n        coordinate: Coordinate = null,\r\n        layerName = null\r\n    ): void {\r\n        // For now, only allow one element at time\r\n        // @TODO: allow edit multiples elements\r\n        if (this._collectionModify.getLength()) return;\r\n\r\n        if (layerName) {\r\n            // Store the layer information inside the feature\r\n            feature.set('_layerName_', layerName);\r\n        }\r\n\r\n        const props = feature ? feature.getProperties() : '';\r\n\r\n        if (props) {\r\n            if (feature.getGeometry()) {\r\n                getEditLayer().getSource().addFeature(feature);\r\n                this._collectionModify.push(feature);\r\n\r\n                const overlay = new EditOverlay(feature, coordinate);\r\n\r\n                // @ts-expect-error\r\n                overlay.on('editFields', () => {\r\n                    this._editFields.show(feature);\r\n                });\r\n\r\n                // @ts-expect-error\r\n                overlay.on('editGeom', () => {\r\n                    this._editModeOn(feature);\r\n                });\r\n\r\n                this._map.addOverlay(overlay);\r\n\r\n                const layer = getStoredLayer(layerName);\r\n                if (layer) {\r\n                    layer.maybeLockFeature(feature.getId());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Activate/deactivate the draw mode\r\n     *\r\n     * @param layer\r\n     * @public\r\n     */\r\n    activateDrawMode(layer: WfsLayer | WmsLayer | false): void {\r\n        /**\r\n         *\r\n         * @param layer\r\n         * @private\r\n         */\r\n        const addDrawInteraction = (layer: WfsLayer | WmsLayer): void => {\r\n            this.activateEditMode(false);\r\n\r\n            // If already exists, remove\r\n            if (this._interactionDraw) {\r\n                this._map.removeInteraction(this._interactionDraw);\r\n            }\r\n\r\n            const geomDrawType = this._selectDraw.value;\r\n\r\n            this._interactionDraw = new Draw({\r\n                source: getEditLayer().getSource(),\r\n                type: geomDrawType as GeometryType,\r\n                style: (feature: Feature<Geometry>) => styleFunction(feature),\r\n                stopClick: true // To prevent firing a map/wms click\r\n            });\r\n\r\n            this._map.addInteraction(this._interactionDraw);\r\n\r\n            this._interactionDraw.on('drawstart', (evt) => {\r\n                super.dispatchEvent(evt);\r\n            });\r\n\r\n            this._interactionDraw.on('drawend', (evt) => {\r\n                const feature: Feature<Geometry> = evt.feature;\r\n                layer.transactFeatures(TransactionType.Insert, feature);\r\n                super.dispatchEvent(evt);\r\n            });\r\n        };\r\n\r\n        if (!this._interactionDraw && !layer) {\r\n            return;\r\n        }\r\n\r\n        if (layer) {\r\n            // If layer is set to invisible, show warning\r\n            if (!layer.getVisible()) {\r\n                return;\r\n            }\r\n\r\n            activateDrawButton();\r\n\r\n            this._viewport.classList.add('draw-mode');\r\n\r\n            addDrawInteraction(layer);\r\n        } else {\r\n            this._map.removeInteraction(this._interactionDraw);\r\n            this._viewport.classList.remove('draw-mode');\r\n        }\r\n\r\n        activateMode(layer ? Modes.Draw : null);\r\n    }\r\n\r\n    /**\r\n     * Activate/desactivate the edit mode\r\n     *\r\n     * @param bool\r\n     * @public\r\n     */\r\n    activateEditMode(bool = true): void {\r\n        if (bool) {\r\n            activateModeButtons();\r\n            this.activateDrawMode(false);\r\n        } else {\r\n            // Deselct features\r\n            this._collectionModify.clear();\r\n        }\r\n\r\n        if (this._interactionSelectModify) {\r\n            this._interactionSelectModify.setActive(bool);\r\n        }\r\n\r\n        this._interactionModify.setActive(bool);\r\n\r\n        if (this._interactionWfsSelect)\r\n            this._interactionWfsSelect.setActive(bool);\r\n    }\r\n\r\n    /**\r\n     * Remove the overlay helper atttached to a specify feature\r\n     * @param feature\r\n     * @private\r\n     */\r\n    _removeOverlayHelper(feature: FeatureLike): void {\r\n        const featureId = feature.getId();\r\n\r\n        if (!featureId) {\r\n            return;\r\n        }\r\n\r\n        const overlay = this._map.getOverlayById(featureId);\r\n\r\n        if (!overlay) {\r\n            return;\r\n        }\r\n\r\n        this._map.removeOverlay(overlay);\r\n    }\r\n}\r\n\r\n/**\r\n * **_[interface]_** - Wfst Options specified when creating a Wfst instance\r\n *\r\n * Default values:\r\n * ```javascript\r\n * {\r\n *  layers: null,\r\n *  evtType: 'singleclick',\r\n *  active: true,\r\n *  showControl: true,\r\n *  language: 'en',\r\n *  i18n: {...}, // according to language selection\r\n *  uploadFormats: '.geojson,.json,.kml',\r\n *  processUpload: null,\r\n * }\r\n * ```\r\n */\r\ninterface Options {\r\n    /**\r\n     * Layers to be loaded from the geoserver\r\n     */\r\n    layers?: Array<WfsLayer | WmsLayer>;\r\n\r\n    /**\r\n     * Init active\r\n     */\r\n    active?: boolean;\r\n\r\n    /**\r\n     * The click event to allow selection of Features to be edited\r\n     */\r\n    evtType?: 'singleclick' | 'dblclick';\r\n\r\n    /**\r\n     * Show/hide the control map\r\n     */\r\n    showControl?: boolean;\r\n\r\n    /**\r\n     * Modal configuration\r\n     */\r\n    modal?: {\r\n        animateClass?: string;\r\n        animateInClass?: string;\r\n        transition?: number;\r\n        backdropTransition?: number;\r\n        templates?: {\r\n            dialog?: string | HTMLElement;\r\n            headerClose?: string | HTMLElement;\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Language to be used\r\n     */\r\n    language?: 'es' | 'en' | 'zh';\r\n\r\n    /**\r\n     * Custom translations\r\n     */\r\n    i18n?: I18n;\r\n\r\n    /**\r\n     * Show/hide the upload button\r\n     */\r\n    showUpload?: boolean;\r\n\r\n    /**\r\n     * Accepted extension formats on upload\r\n     * Example: \".json,.geojson\"\r\n     */\r\n    uploadFormats?: string;\r\n\r\n    /**\r\n     * Triggered to allow implement custom functions or to parse other formats than default\r\n     * by filtering the extension. If this doesn't return features, the default function\r\n     * will be used to extract them.\r\n     */\r\n    processUpload?(file: File): Array<Feature<Geometry>>;\r\n}\r\n\r\n/**\r\n * **_[interface]_** - Parameters to create the layers and connect to the GeoServer\r\n *\r\n * You can use all the parameters supported by OpenLayers\r\n *\r\n *  Default values:\r\n * ```javascript\r\n * {\r\n *  name: null,\r\n *  geoserver: null,\r\n *  label: null, // `name` if not provided\r\n *  strategy: all,\r\n *  geoserverVendor: null\r\n * }\r\n * ```\r\n */\r\ninterface LayerOptions extends Omit<VectorLayerOptions<any>, 'source'> {\r\n    /**\r\n     * Layer name in the GeoServer\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Geoserver Object\r\n     */\r\n    geoserver: Geoserver;\r\n\r\n    /**\r\n     * Label to be displayed in the widget control\r\n     */\r\n    label?: string;\r\n\r\n    /**\r\n     * Available geoserver options\r\n     */\r\n    geoserverVendor?: WfsGeoserverVendor | WmsGeoserverVendor;\r\n\r\n    /**\r\n     * Strategy function for loading features.\r\n     * Only for WFS\r\n     * By default `all` strategy is used\r\n     */\r\n    strategy?: LoadingStrategy;\r\n\r\n    /**\r\n     * Triggered before inserting new features to the Geoserver.\r\n     * Use this to insert custom properties, modify the feature, etc.\r\n     */\r\n    beforeTransactFeature?(\r\n        feature: Feature<Geometry>,\r\n        transaction: TransactionType\r\n    ): Feature<Geometry>;\r\n}\r\nclass WfstEvent extends BaseEvent {\r\n    public data: IGeoserverDescribeFeatureType;\r\n    public layer: WfsLayer | WmsLayer;\r\n\r\n    constructor(options: {\r\n        type: WfstEventTypes;\r\n        layer: WfsLayer | WmsLayer;\r\n        data: IGeoserverDescribeFeatureType;\r\n    }) {\r\n        super(options.type);\r\n        this.layer = options.layer;\r\n        this.data = options.data;\r\n    }\r\n}\r\n\r\ntype WfstEventTypes = 'describeFeatureType';\r\n\r\nexport {\r\n    Options,\r\n    WfstEventTypes,\r\n    WfstEvent,\r\n    I18n,\r\n    LayerOptions,\r\n    Geoserver,\r\n    WmsLayer,\r\n    WfsLayer\r\n};\r\n"],"names":["img","myPragma","visibilityOn","visibilityOff","uploadSvg","drawSvg","CircleStyle","GeometryCollection","Circle","editFieldsSvg","editGeomSvg","i18n.setLang","Style","Fill","Stroke","i18n.I18N"],"mappings":"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"}